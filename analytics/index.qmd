--- 
title: "Analytics // WLM 2023"
author: "A. Angelgardt"
format: 
  dashboard:
    scrolling: true
    logo: pics/logo.png
---

::: {hidden=true}

## Chunk opts
```{r opts, echo=FALSE, eval=TRUE, message=FALSE}
knitr::opts_chunk$set(echo=FALSE, 
                      message=FALSE, 
                      eval=TRUE,
                      warning=FALSE,
                      cache = FALSE
                      )
```


## Install pkgs
```{r install-pkgs, eval=FALSE}
# install.packages(c("rystats", "googlesheets4"))
# if (!("remotes" %in% installed.packages())) {
#   install.packages("remotes")
# }
# remotes::install_github("datatrail-jhu/rgoogleclassroom")
```


## Libraries
```{r pkgs, cache=FALSE}
library(rytstat)
library(googlesheets4)
library(rgoogleclassroom)
library(tidyverse)
library(plotly)
```

```{r ggplot-theme, cache=FALSE}
theme_set(theme_bw())
theme_update(legend.position = "bottom")
```

```{r auth}
## youtube
ryt_auth('course.wlm@gmail.com')
# ryt_deauth()
# ryt_has_token()
# ryt_user()

## gs4 auth
gs4_auth("a.n.angelgardt@gmail.com")

## classroom
# token <- authorize()
# save.image("/Users/antonangelgardt/tokens/classroom_token.Rdata")
# load("/home/nglgrdt/tokens/classroom_token.Rdata")
# load("/home/angelgardt/tokens/classroom_token.Rdata")
load("/Users/antonangelgardt/tokens/classroom_token.Rdata")
auth_from_secret(access_token = token$credentials$access_token,
                 refresh_token = token$credentials$refresh_token)
```


## Load data

### Spec

```{r get-spec-data}
## homeworks
hw_spec <- read_sheet("https://docs.google.com/spreadsheets/d/1iCy8MDz-ER95OfylV-xAY6lIxfbCZiHq5NM3i4smm5M/edit?usp=sharing",
                      sheet = "HW") %>% 
  select(task, level)

## quizes
q_sp <- read_sheet("https://docs.google.com/spreadsheets/d/1iCy8MDz-ER95OfylV-xAY6lIxfbCZiHq5NM3i4smm5M/edit?usp=sharing",
                     sheet = "Q") %>% 
  filter(!is.na(task_code))
q_nulls <- read_sheet("https://docs.google.com/spreadsheets/d/1iCy8MDz-ER95OfylV-xAY6lIxfbCZiHq5NM3i4smm5M/edit?usp=sharing",
                     sheet = "Q_NULLS")
```

### Calendar

```{r get-calendar-data}
read_sheet("https://docs.google.com/spreadsheets/d/1k9QtNjZLzTrbYlkXrWFWxglXTG5kol1DHSPIN9stLiE/edit?usp=sharing",
           sheet = "План", skip = 2) -> calendar
calendar %>% 
  select(date, code_1) %>% 
  filter(str_detect(code_1, "^L|^P|^C|^A")) %>% 
  mutate(date = as_date(date, format = "%d/%m/%y")) %>% 
  rename("code" = "code_1") -> calendar_activities

calendar %>%
  select(code_2, deadline_soft, deadline_hard) %>%
  filter(str_detect(code_2, "^Q|^HW")) %>%
  mutate(deadline_soft = as_datetime(deadline_soft, format = "%d/%m/%y %H:%M") %>% date(),
         deadline_hard = as_datetime(deadline_hard, format = "%d/%m/%y %H:%M") %>% date()) %>%
  rename("code" = "code_2") %>% 
  pivot_longer(-code, names_to = "deadline", values_to = "date") %>% 
  mutate(deadline = str_remove(deadline, "deadline_")) -> calendar_assessment

```

### Journal

```{r get-journal-data}
## practice
journal <- read_sheet("https://docs.google.com/spreadsheets/d/1mNT6A3qJTnS5EXQJg6MKFNinRqOVmrGErMZdrfsN9To/edit?usp=sharing",
                         sheet = "Journal", col_types = "c")
journal %>% 
  select(ID, Stream, starts_with("P")) -> pr_journal

## calculate number of participants
pr_journal %>% 
  filter(Stream == "main") %>% 
  summarise(n = n()) %>% 
  pull(n) -> n_partic

## practice presence
pr_journal %>% 
  filter(Stream == "main") %>% 
  select(-Stream) %>% 
  pivot_longer(-ID, 
               names_to = "practice",
               values_to = "present") %>% 
  separate(practice, into = c("practice", "half"), sep = "-") %>% 
  group_by(practice, half) %>% 
  mutate(present = as.numeric(present),
         practice = factor(practice,
                           ordered = TRUE,
                           levels = paste0("P", 1:17))) %>%
  replace_na(list(present = 0)) %>% 
  summarise(count = sum(present),
            percentage = mean(present) %>% round(2)) -> pr



## consulations
journal %>% 
  select(ID, Stream, starts_with("C"), -Certificate) -> c_journal

## consulations presence
c_journal %>% 
  filter(Stream == "main") %>% 
  select(-Stream) %>% 
  pivot_longer(-ID, 
               names_to = "consultation",
               values_to = "present") %>% 
  group_by(consultation) %>% 
  mutate(present = as.numeric(present),
         consultation = factor(consultation,
                               ordered = TRUE,
                               levels = paste0("C", 1:17))) %>%
  replace_na(list(present = 0)) %>% 
  summarise(count = sum(present),
            percentage = mean(present) %>% round(2)) -> cons



## homeworks
journal %>% 
  select(ID, Stream, matches("^HW\\d+")) -> hw_journal

## homeworks not submitted
hw_journal %>% 
  filter(Stream == "main") %>% 
  pivot_longer(cols = -c(ID, Stream),
               names_to = "hw",
               values_to = "score") %>% 
  filter(score != "NS") %>% 
  group_by(hw) %>% 
  summarise(n = n()) -> hws_ns

## homeworks scores
hw_journal %>% 
  filter(Stream == "main") %>%
  select(-Stream) %>% 
  pivot_longer(cols = -ID,
               names_to = "hw",
               values_to = "score") %>% 
  filter(score != "NS") %>% 
  mutate(score = as.numeric(score),
         hw = factor(hw, 
                     ordered = TRUE,
                     levels = paste0("HW", 1:16))) -> hws_scores

## homework sheets
sheet_names("https://docs.google.com/spreadsheets/d/1mNT6A3qJTnS5EXQJg6MKFNinRqOVmrGErMZdrfsN9To/edit?usp=sharing") %>% 
  str_extract("^HW\\d+") %>% 
  na.omit() -> hws_sheets

## homework tasks
hw_tsks <- tibble()
for (i in 1:length(hws_sheets)) {
  read_sheet("https://docs.google.com/spreadsheets/d/1mNT6A3qJTnS5EXQJg6MKFNinRqOVmrGErMZdrfsN9To/edit?usp=sharing",
             sheet = hws_sheets[i], col_types = "c") %>% 
    select(ID, starts_with("hw")) %>% 
    pivot_longer(-ID, names_to = "task", values_to = "score") %>% 
    bind_rows(hw_tsks) -> hw_tsks
}

## homework tasks preprocess
hw_tsks %>%
  left_join(hw_spec,
            join_by(task)) %>%
  separate(task, into = c("hw", "task")) %>%
  mutate(task = factor(task,
                       ordered = TRUE,
                       levels = as.character(1:15)),
         level = factor(level,
                        ordered = TRUE,
                        levels = c("easy", "medium", "hard", "extreme"))) %>%
  mutate(hw = toupper(hw)) -> hw_tasks



## quizes
# q_journal <- read_sheet("https://docs.google.com/spreadsheets/d/1mNT6A3qJTnS5EXQJg6MKFNinRqOVmrGErMZdrfsN9To/edit?usp=sharing",
#                         sheet = "Journal") %>% 
#   select(ID, Stream, starts_with("Q"))


# q_scores <- tibble()
# for(i in paste0("Q", 1:2)) {
#   if(i == "Q1") {
#     read_sheet("https://docs.google.com/spreadsheets/d/1mNT6A3qJTnS5EXQJg6MKFNinRqOVmrGErMZdrfsN9To/edit?usp=sharing",
#                sheet = i) %>% 
#       select(ID, matches("q\\d+-\\d+"), TOTAL) -> q_scores
#   } else {
#     read_sheet("https://docs.google.com/spreadsheets/d/1mNT6A3qJTnS5EXQJg6MKFNinRqOVmrGErMZdrfsN9To/edit?usp=sharing",
#                sheet = i) %>% 
#       select(ID, matches("q\\d+-\\d+"), TOTAL) %>% 
#       full_join(q_scores, join_by(ID)) -> q_scores
#   }
# }




## J project

read_sheet("https://docs.google.com/spreadsheets/d/1mNT6A3qJTnS5EXQJg6MKFNinRqOVmrGErMZdrfsN9To/edit?usp=sharing",
           sheet = "J", col_types = "c") %>% 
  anti_join(journal %>% 
              select(Stream, ID) %>% 
              filter(Stream == "test"),
            join_by(ID)
  ) -> j_journal


## F project

read_sheet("https://docs.google.com/spreadsheets/d/1mNT6A3qJTnS5EXQJg6MKFNinRqOVmrGErMZdrfsN9To/edit?usp=sharing",
           sheet = "F", col_types = "c") %>% 
  anti_join(journal %>% 
              select(Stream, ID) %>% 
              filter(Stream == "test"),
            join_by(ID)
  ) -> f_journal

```

### YouTube

```{r get-yt-data}
## custom load function
## package function seems to have a bug
ryt_get_analytics_custom <- function (start_date = Sys.Date() - 14, 
                                      end_date = Sys.Date(), 
                                      metrics = c(
                                        "views", 
                                        "likes",
                                        "dislikes",
                                        "estimatedMinutesWatched",
                                        "averageViewDuration", 
                                        "averageViewPercentage"), 
                                      dimensions = "day", 
                                      filters = NULL, ...) 
{
  require(cli)
  require(gargle)
  cli_alert_info("Compose params")
  metrics <- paste0(metrics, collapse = ",")
  dimensions <- paste0(dimensions, collapse = ",")
  out <- request_build(method = "GET", 
                       params = list(startDate = start_date, 
                                     endDate = end_date, ids = "channel==MINE",
                                     dimensions = dimensions, 
                                     filters = filters, 
                                     metrics = metrics), 
                       token = ryt_token(), 
                       path = "v2/reports", 
                       base_url = "https://youtubeanalytics.googleapis.com/")
  cli_alert_info("Send query")
  ans <- request_retry(out, encode = "json")
  resp <- response_process(ans)
  cli_alert_info("Parse result")
  suppressMessages({
    data <- tibble(response = resp$rows) %>% 
      unnest_wider(.data$response, ...)
  })
  if (nrow(data) == 0) {
    cli_alert_warning("Empty answer")
    return(tibble())
  }
  headers <- tibble(response = resp$columnHeaders) %>%
    unnest_wider(.data$response, ...)
  data <- set_names(data, headers$name)
  cli_alert_success(str_glue("Success, loading {nrow(data)} rows."))
  return(data)
}




ryt_get_videos() %>% 
  select(id_videoId, title) %>%
  filter(!str_detect(title, "внутряк") & str_detect(title, "WLM2023")) -> videos

# video_id_list <- paste0(head(videos$id_video_id, 500), collapse = ',')

dimensions <- c('day', 'video')
metrics <- c("views", "likes", "dislikes", "estimatedMinutesWatched", "averageViewDuration", "averageViewPercentage")

ryt_get_analytics_custom(
  start_date = '2023-11-06', end_date = Sys.Date(),
  dimensions = dimensions,
  metrics    = metrics,
  filters = str_glue('video=={str_c(head(videos$id_videoId, 500), collapse=",")}'), names_sep = ""
) %>% 
  set_names(c(dimensions, metrics)) %>% 
  left_join(videos, join_by("video" == "id_videoId")) -> basics_by_videos

basics_by_videos %>% 
  mutate(day = as_date(day)) %>% 
  filter(str_detect(title, "^L")) %>% 
  separate(title, into = c("code", "name", "course", "lab"), sep = " // ") %>% 
  select(-course, - lab) -> lec

basics_by_videos %>% 
  mutate(day = as_date(day)) %>% 
  filter(str_detect(title, "^P")) %>% 
  separate(title, into = c("code", "name", "course", "lab"), sep = " // ") %>% 
  select(-course, - lab) -> pr_videos

basics_by_videos %>% 
  mutate(day = as_date(day)) %>% 
  filter(str_detect(title, "^С|^C")) %>% 
  separate(title, into = c("code", "course", "lab"), sep = " // ") %>% 
  select(-course, - lab) -> cons_videos

basics_by_videos %>% 
  mutate(day = as_date(day)) %>% 
  filter(str_detect(title, "^A|^А")) %>% 
  separate(title, into = c("code", "name", "course", "lab"), sep = " // ") %>% 
  select(-course, - lab) -> a_videos
```


### Classroom

```{r get-classroom-data}
get_course_list() %>% 
  .$courses %>% 
  filter(name == "WLM 2023 // HSE UX LAB") %>% 
  pull(id) -> course_id

get_coursework_list(course_id)$courseWork %>% 
  select(id, title) %>%
  filter(str_detect(title, "^Q")) %>% 
  mutate(code = str_extract(title, "^Q\\d+")) -> q_ids

tibble(
  Q1 = "https://docs.google.com/forms/d/1WrlABMSqcQY03Wefboe3E9uTXSxPW1o-Z6esk4qPSuM/edit#responses",
  Q2 = "https://docs.google.com/forms/d/1muDdJjr0ZIwHFYuDRK9YBbQlsxXfd8fJM1dNdyFOaMk/edit#responses",
  Q3 = "https://docs.google.com/forms/d/1lRFq_QXwI-LSXNDsZksgZLJ7in33fANNslYmlS3qUk0/edit#responses",
  Q4 = "https://docs.google.com/forms/d/1VqekS1ApzQ74QxaQ1O-B9oPjjJ8c2QyRwe1DS9PEZKg/edit#responses",
  Q5 = "https://docs.google.com/forms/d/1uq3i_Zz-ArIG0ILGxlLmFIMqGscVkKv7PHZe6LoFF4c/edit#responses",
  Q6 = "https://docs.google.com/forms/d/17fPOx52-RK-hxDUsrD5hei0Uw7ScdWwfKpD_1fb8AWw/edit#responses",
  Q7 = "https://docs.google.com/forms/d/1Ywo9r_EF9qEeV9PbG70EMm95ci2XM2S-b9IgCPjYBLI/edit#responses",
  Q8 = "https://docs.google.com/forms/d/1JItuzbpNIemDLYFYI43pi_GGy_vmdpLWAauZzLNv0dE/edit#responses",
  Q9 = "https://docs.google.com/forms/d/177eGZsat4ntKKFoS-YKbZ3GuZnzTaB4-vwh2lYTYwK0/edit#responses",
  Q10 = "https://docs.google.com/forms/d/1EzNjUV5653DYEEsFXeIdgT98pEqEmcMh0hTVwlna-3Q/edit#responses",
  Q11 = "https://docs.google.com/forms/d/1KTfflQIUL_VMsSB8W3KgXmLVu32VagUVycnOe08UN6o/edit#responses",
  Q12 = "https://docs.google.com/forms/d/1WfDmr8Sds-hCrnL5oaBVGx_C2EzwvTBcCL1Ph2Dxebw/edit#responses",
  Q13 = "https://docs.google.com/forms/d/1ffHuvBGiM7ctNozoH6TJgrU_Asp1oMaJMoMvFDiURbw/edit#responses",
  Q14 = "https://docs.google.com/forms/d/1HBJ78eluyw29GNnRHlG5Yqtc_inclX9tJ_S5FpwNwNk/edit#responses",
  Q15 = "https://docs.google.com/forms/d/1dG1AAOkA8vT8GyfPKklK5oeEAXRNBIiQcHyasQIYfxk/edit#responses"
) %>% pivot_longer(cols = everything(),
                   names_to = "code",
                   values_to = "link") -> q_links

# get_coursework_properties(course_id, coursework_id)
# get_form_properties(form_id = NULL, form_url = NULL)
```

```{r quizzes-preproc}
q_props <- list()
for(i in 1:15) {
  get_form_properties(form_url = q_links$link[i]) %>% 
    .$items %>% 
    mutate(code = paste0("Q", i)) -> q_props[[i]]
}

q_resps <- list()
for(i in 1:15) {
  get_form_responses(form_url = q_links$link[i])$responses %>% 
    filter(month(as_date(lastSubmittedTime)) > 10 | year(as_date(lastSubmittedTime)) > 2023) %>% 
    mutate(code = paste0("Q", i))-> q_resps[[i]]
}

q_resps %>% 
  map(function(x) {x %>% select(responseId, totalScore, lastSubmittedTime, code)}) -> q_ts

q_total_scores <- tibble()
for (i in 1:length(q_ts)) {
  q_ts[[i]] %>% 
    bind_rows(q_total_scores) -> q_total_scores
}

q_ts %>% 
  map(function(x) nrow(x)) %>% 
  as_tibble(.name_repair = "universal") %>% 
  rename_with(str_replace_all, pattern = "\\.\\.\\.", replacement = "Q") %>% 
  pivot_longer(cols = everything(),
               names_to = "code", 
               values_to = "n") -> q_n
```

```{r q-task-export, eval=FALSE}
# q_tasks <- tibble()
# for (i in 1:length(q_props)) {
#   q_props[[i]] %>% 
#     select(itemId, title, code) %>% 
#     slice(-1) %>% 
#     bind_rows(q_tasks) -> q_tasks
# }
# q_tasks %>% write_sheet("https://docs.google.com/spreadsheets/d/1iCy8MDz-ER95OfylV-xAY6lIxfbCZiHq5NM3i4smm5M/edit?usp=sharing",
#                         sheet = "Q")

# q_questions <- tibble()
# for (i in 1:length(q_props)) {
#   q_props[[i]]$questionItem$question %>% 
#     select(questionId) %>% 
#     mutate(code = paste0("Q", i)) %>% 
#     slice(-1) %>% 
#     bind_rows(q_questions) -> q_questions
# }
# q_questions %>% write_sheet("https://docs.google.com/spreadsheets/d/1iCy8MDz-ER95OfylV-xAY6lIxfbCZiHq5NM3i4smm5M/edit?usp=sharing",
#                             sheet = "Q_questions")
```

```{r q-fix, eval=FALSE}
# q_props[[1]]$questionItem$question$grading
# q_props[[1]]$questionItem$question %>% select(questionId)
# q_resps[[1]]$answers[[2]]$grade
# q_resps[[1]]
# 
# q_props[[1]] %>% str()
# q_resps[[1]]$answers$`430dd10a`$grade$correct
# 
# (q_resps[[7]]$answers %>% names())[
#   !(q_resps[[7]]$answers %>% names()) %in% (q_props[[7]]$questionItem$question %>% select(questionId) %>% pull(questionId))
# ]
# 
# #  "57cc894c" "45438f30" "7e2f5172" "0cef7aff" "400b60f4" "704c90b2" "6d08b363"
# q_resps[[13]]$answers$`57cc894c`$textAnswers$answers %>% unlist()
```

```{r quizzes-spec-preproc}
## quiz specification preprocess
q_sp %>% 
  summarise(max_total_score = sum(max_score),
            .by = code) -> q_max_total_score

### quizes preproc
# source("scripts/q-preproc/q1_preproc.R")
# source("scripts/q-preproc/q2_preproc.R")


# map(
#   q_resps[[4]]$answers,
#   function(x) x$grade$correct
# ) %>% enframe() %>% unnest("value", keep_empty = TRUE) %>% filter(name == "410b5ff6")

# map(
#   q_resps[[2]]$answers[-1],
#   function(x) x$grade$correct
# ) %>% 
#   as_tibble() %>% 
#   mutate(responseId = q_resps[[1]]$responseId,
#          code = q_resps[[1]]$code) %>% 
#   pivot_longer(cols = -c(responseId, code),
#                names_to = "questionId",
#                values_to = "correct") %>% 
#   replace_na(list(correct = FALSE))
#   
#   
# map(
#   q_resps[[7]]$answers[-17],
#   function(x) x$grade$correct
# ) %>% as_tibble() %>% select("0621265c")

# q1_total_scores %>% 
#   bind_rows(q2_total_scores) %>% 
#   left_join(q_max_total_scores,
#             join_by(code)) %>% 
#   mutate(lastSubmittedTime = as_datetime(lastSubmittedTime),
#          totalScore100 = (totalScore / max_total_score * 100) %>% round()) %>% 
#   filter(month(lastSubmittedTime) > 10) -> q_total_scores
# 
# q1_item_score %>% 
#   bind_rows(q2_item_score) -> q_item_scores

# get_form_responses(form_url = q_links$link[15]) -> q15


q_questions <- tibble()
for (i in 1:15) {
  q_resps[[i]]$answers -> current_ans
  map(
    current_ans[!names(current_ans) %in% (q_nulls %>% filter(code == paste0("Q", i)) %>% pull(questionId))],
    function(x) x$grade$correct
    ) %>% 
    as_tibble() %>% 
    mutate(responseId = q_resps[[i]]$responseId,
           code = q_resps[[i]]$code) %>% 
    pivot_longer(cols = -c(responseId, code),
                 names_to = "questionId",
                 values_to = "correct") %>% 
    replace_na(list(correct = FALSE)) %>% 
    bind_rows(q_questions) -> q_questions
}

nrow(q_questions)
nrow(q_sp)

q_sp %>% 
  filter(!is.na(questionId)) %>% # nrow()
  separate(questionId, into = paste0("questionId", 1:7), sep = "\n") %>% 
  pivot_longer(cols = paste0("questionId", 1:7),
               names_to = "questionId_num", values_to = "questionId") %>% 
  filter(!is.na(questionId)) %>% 
  # full_join(q_questions, ## produce NA from buged questions q14_3 & q4_6
  #           join_by(code, questionId)) %>% # View()
  right_join(q_questions,
             join_by(code, questionId)) %>% # View()
  # nrow()
  # pull(max_score) %>% is.na() %>% sum()
  # pull(correct) %>% is.na() %>% sum()
  # filter(is.na(correct))
  group_by(code, responseId, itemId, task_code) %>% 
  summarise(score = sum(correct)) %>% 
  full_join(
    q_sp %>% select(task_code, max_score),
    join_by(task_code)
  ) %>% # nrow()
  full_join(q_total_scores %>% select(code, responseId, totalScore),
            join_by(code, responseId)) -> q_questions_full

q_questions_full %>% # sapply(is.na) %>% apply(2, sum)
  filter(!is.na(code)) %>% 
  ungroup() %>% 
  group_by(code, task_code) %>% 
  summarise(mean_score = mean(score)) %>% # nrow()
  left_join(q_sp %>% select(code, task_code, max_score),
            join_by(code, task_code)) %>% 
  mutate(difficulty = mean_score / max_score) -> q_difficulty

q_questions_full %>% # sapply(is.na) %>% apply(2, sum)
  filter(!is.na(code)) %>% 
  ungroup() %>% 
  group_by(code, task_code) %>% 
  summarise(discrimination = cor(score, totalScore)) %>% 
  replace_na(list(discrimination = 0)) -> q_discrimination

q_discrimination %>% 
  full_join(q_difficulty %>% select(code, task_code, difficulty),
            join_by(code, task_code)) -> q_psymet_props
```

```{r get-aesthetics}
aesth <- yaml::read_yaml("aesthetics.yml")
```

### FB5

```{r get-fb5}
fb5 <- read_sheet("https://docs.google.com/spreadsheets/d/1mttm7MFNfpopTqAj6KDmLSDiSsqNFMtzhDobhXazHFc/edit?usp=sharing",
                  skip = 1) # %>% filter(!str_detect(name, "test"))
fb5 %>% 
  select(fb_o1, fb_o2, fb_o4) %>% 
  mutate(fb_o1_groups = ifelse(fb_o1 >= 6, "good", "bad"),
         fb_o2_groups = ifelse(fb_o2 >= 8, "enth", ifelse(fb_o2 <= 5, "dis", "norm")),
         fb_o4_groups = ifelse(fb_o4 >= 9, "prom", ifelse(fb_o4 <= 6, "det", "neut"))) -> fb5_groups

fb5_groups %>% pull(fb_o1) %>% mean() %>% round() %>% paste0(" / 10") -> csi
fb5_groups %>% summarise(n = n(),
                         .by = fb_o1_groups) %>% 
  mutate(csat = round(n / sum(n) * 100)) %>% 
  filter(fb_o1_groups == "good") %>% pull(csat) %>% paste0("%") -> csat

fb5_groups %>% summarise(n = n(),
                         .by = fb_o2_groups) %>% 
  mutate(ers_perc = round(n / sum(n) * 100)) %>% 
  full_join(tibble(fb_o2_groups = c("norm", "enth", "dis"),
                   ers_perc_ = 0),
            join_by(fb_o2_groups)) %>% 
  mutate(ers_perc = ifelse(is.na(ers_perc), ers_perc_, ers_perc)) %>% 
  select(-n, -ers_perc_) %>% 
  pivot_wider(names_from = fb_o2_groups,
              values_from = ers_perc) %>% 
  transmute(ers = enth - dis) %>% 
  pull(ers) -> ers

fb5_groups %>% summarise(n = n(),
                         .by = fb_o4_groups) %>% 
  mutate(nps_perc = round(n / sum(n) * 100)) %>% 
  full_join(tibble(fb_o4_groups = c("prom", "neut", "det"),
                   nps_perc_ = 0),
            join_by(fb_o4_groups)) %>% 
  mutate(nps_perc = ifelse(is.na(nps_perc), nps_perc_, nps_perc)) %>% 
  select(-n, -nps_perc_) %>% 
  pivot_wider(names_from = fb_o4_groups,
              values_from = nps_perc) %>% 
  transmute(nps = prom - det) %>% 
  pull(nps) -> nps
```

:::





# Метрики

```{r merics}
journal %>% 
  filter(Stream == "main") %>% 
  select(ID, Stream, matches("^HW\\d|^P\\d|^Q\\d|^C\\d|^J$|^F$")) %>% 
  pivot_longer(cols = -c(ID, Stream),
               names_to = "code") %>% 
  separate(code, into = c("code", "part"), sep = "-") %>% 
  mutate(value = as.numeric(value)) %>% 
  summarise(done = sum(value, na.rm = TRUE) > 0,
            .by = c(ID, code)) %>% 
  summarise(n = sum(done),
            .by = code) -> n_activities

calendar %>% 
  select(date, week, block, code_1, code_2) %>% 
  filter(week != "—" & 
           week != "0" &
           code_1 != code_2) %>% 
  pivot_longer(cols = -c(date, week, block), 
               values_to = "code") %>% 
  filter(code != "—") %>% 
  right_join(n_activities,
             join_by(code)) -> n_activities_weeks_blocks

n_activities_weeks_blocks %>% 
  summarise(n_retention = max(n),
            .by = week) %>% 
  mutate(`Absolute Retention` = round(n_retention / n_partic * 100, 2)) %>% 
  filter(week != 7) %>% 
  mutate(previous_n_retention = lag(n_retention),
         `Relative Retention` = round(n_retention / previous_n_retention * 100, 2)) -> retention_weeks

retention_weeks %>% 
  filter(week == 1) %>% 
  select(week, `Absolute Retention`) -> activation

retention_weeks %>% 
  filter(week == "21–22") %>% 
  select(week, `Absolute Retention`) -> completion

n_activities_weeks_blocks %>% 
  summarise(n_retention = max(n),
            .by = block) %>% 
  mutate(previous_n_retention = lag(n_retention),
         `Absolute Retention` = round(n_retention / n_partic * 100, 2),
         `Relative Retention` = round(n_retention / previous_n_retention * 100, 2)) %>% 
  filter(!is.na(block)) -> retention_blocks
```


## Row

```{r}
#| content: valuebox
#| title: "Activation"
list(
  icon = "check",
  color = "#9AEBC6",
  value = paste0(activation$`Absolute Retention`, "%")
)
```

```{r}
#| content: valuebox
#| title: "Completion Rate"
list(
  icon = "trophy",
  color = "#95B4F5",
  value = paste0(completion$`Absolute Retention`, "%")
)
```

```{r}
#| content: valuebox
#| title: "Customer Satisfaction Index"
list(
  icon = "bar-chart",
  color = "#F0C281",
  value = csi
)
```

```{r}
#| content: valuebox
#| title: "Customer Satisfaction Score"
list(
  icon = "bar-chart",
  color = "#F0C281",
  value = csat
)
```

## Row

```{r}
#| content: valuebox
#| title: "Net Promoter Score"
list(
  icon = "bar-chart",
  color = "#F0E790",
  value = as.character(nps)
)
```

```{r}
#| content: valuebox
#| title: "Expectation/Reality Score"
list(
  icon = "bar-chart",
  color = "#F0E790",
  value = as.character(ers)
)
```


## Row
```{r retention-weeks}
retention_weeks %>% pull(week) -> weeks
retention_weeks %>% 
  pivot_longer(cols = c(`Absolute Retention`, `Relative Retention`)) %>% 
  mutate(week = factor(week, 
                          ordered = TRUE,
         levels = weeks)) %>% 
  ggplot(aes(week, value, color = name)) +
  geom_point() +
  geom_line(aes(group = name)) +
  # scale_color_discrete(labels = c(rel_retention = "Относительное удержание",
  #                                 abs_retention = "Абcолютное удержание")) +
  # geom_point(data = activation,
  #            aes(week, `Absolute Retention`),
  #            size = 2, color = "green3") +
  # geom_point(data = completion,
  #            aes(week, `Absolute Retention`),
  #            size = 2, color = "blue3") +
  labs(title = "Retention // Недели",
       x = "Неделя", y = "Процент",
       color = "Метрика") -> retention_weeks_plot

retention_weeks_plot %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


## Row

```{r retention-blocks}
retention_blocks %>% pull(block) -> blocks
retention_blocks %>% 
  pivot_longer(cols = c(`Absolute Retention`, `Relative Retention`)) %>% 
  mutate(block = factor(block, 
                          ordered = TRUE,
         levels = blocks)) %>% 
  ggplot(aes(block, value, color = name)) +
  geom_point() +
  geom_line(aes(group = name)) +
  scale_x_discrete(labels = c("R", 
                              "Промежуточный\nпроект",
                              "Математика\nи статистика",
                              "Анализ данных",
                              "Итоговый\nпроект")) +
  # scale_color_discrete(labels = c(rel_retention = "Относительное удержание",
  #                                 abs_retention = "Абcолютное удержание")) +
  labs(title = "Retention // Блоки",
       x = "Неделя", y = "Процент",
       color = "Метрика") -> retention_blocks_plot

retention_blocks_plot %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

# L // Лекции {#lec}


## Row

```{r lectures-views-by-day}
calendar_activities %>%
  filter(str_detect(code, "^P")) %>%
  ggplot() +
  geom_line(data = lec,
            aes(day, views, color = code)) +
  geom_vline(aes(xintercept = as.numeric(date)),
             linetype = "dashed",
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Количество просмотров",
    color = "Лекция",
    title = "Динамика просмотров лекций"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) -> lec_views_dynamics

lec_views_dynamics %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


```{r lectures-graph-cumsum-views}
calendar_activities %>%
  filter(str_detect(code, "^P")) %>%
  ggplot() +
  geom_line(
    data = lec %>%
      group_by(video) %>%
      mutate(cum_views = cumsum(views)),
    aes(day, cum_views, color = code)
  ) +
  geom_vline(aes(xintercept = as.numeric(date)),
             linetype = "dashed",
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Количество просмотров",
    color = "Лекция",
    title = "Кумулятивная сумма просмотров лекций"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) -> lec_cumsum_views

lec_cumsum_views %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

## Row

```{r lectures-ave-view-dur-by-day}
calendar_activities %>%
  filter(str_detect(code, "^P")) %>%
  ggplot() +
  geom_line(data = lec,
            aes(day, averageViewDuration, color = code)) +
  geom_vline(aes(xintercept = as.numeric(date)),
             linetype = "dashed",
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Средняя продолжительность\nвоспроизведения видео, с",
    color = "Лекция",
    title = "Абсолютная продолжительность просмотра лекций"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) -> lec_ave_views_dur

lec_ave_views_dur %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


```{r lectures-ave-view-perc-by-day}
calendar_activities %>%
  filter(str_detect(code, "^P")) %>%
  ggplot() +
  geom_line(data = lec,
            aes(day, averageViewPercentage, color = code)) +
  geom_vline(aes(xintercept = as.numeric(date)),
             linetype = "dashed",
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Средняя доля\nвоспроизведения видео, %",
    color = "Лекция",
    title = "Относительная продолжительность просмотра лекций"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) -> lec_ave_views_perc

lec_ave_views_perc %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```




# P // Практики {#pr}


## Row

```{r pr-graph-visits}
pr %>%
  ggplot(aes(practice, percentage, color = half, group = half)) +
  geom_line() +
  geom_point() +
  scale_y_continuous(limits = c(0, 1)) +
  scale_color_discrete(labels = c(`1` = "первая", `2` = "вторая")) +
  labs(
    x = "Практика",
    y = "Доля присутствовавших",
    color = "Часть практики",
    title = "Динамика посещения практик"
  ) -> pr_visits

pr_visits %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


## Row

```{r practice-views-by-day}
calendar_assessment %>%
  filter(str_detect(code, "^HW")) %>%
  ggplot() +
  geom_line(data = pr_videos,
            aes(day, views, color = code)) +
  geom_vline(aes(xintercept = as.numeric(date),
                 linetype = deadline),
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Количество просмотров",
    color = "Практика",
    linetype = "Дедлайн",
    title = "Динамика просмотров записей практик"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  scale_linetype_manual(
    values = c(hard = "dashed", soft = "dotted"),
    labels = c(hard = "жёсткий", soft = "мягкий")
  ) +
  theme(axis.text.x = element_text(angle = 90)) -> pr_vids_views

pr_vids_views %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```



```{r practice-views-cumsum}
calendar_assessment %>%
  filter(str_detect(code, "^HW")) %>%
  ggplot() +
  geom_line(
    data = pr_videos %>%
      group_by(video) %>%
      mutate(cum_views = cumsum(views)),
    aes(day, cum_views, color = code)
  ) +
  geom_vline(aes(xintercept = as.numeric(date),
                 linetype = deadline),
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Количество просмотров",
    color = "Практика",
    linetype = "Дедлайн",
    title = "Кумулятивная сумма просмотров записей практик"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  scale_linetype_manual(
    values = c(hard = "dashed", soft = "dotted"),
    labels = c(hard = "жёсткий", soft = "мягкий")
  ) +
  theme(axis.text.x = element_text(angle = 90)) -> pr_vids_cumsum_views

pr_vids_cumsum_views %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


## Row

```{r practice-ave-view-dur-by-day}
calendar_assessment %>%
  filter(str_detect(code, "^HW")) %>%
  ggplot() +
  geom_line(data = pr_videos,
            aes(day, averageViewDuration, color = code)) +
  geom_vline(aes(xintercept = as.numeric(date),
                 linetype = deadline,),
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Средняя продолжительность\nвоспроизведения видео, с",
    color = "Практика",
    linetype = "Дедлайн",
    title = "Абсолютная продолжительность просмотра практик"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  scale_linetype_manual(
    values = c(hard = "dashed", soft = "dotted"),
    labels = c(hard = "жёсткий", soft = "мягкий")
  ) +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) -> pr_ave_views_dur

pr_ave_views_dur %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


```{r practice-ave-view-perc-by-day}
calendar_assessment %>%
  filter(str_detect(code, "^HW")) %>%
  ggplot() +
  geom_line(data = pr_videos,
            aes(day, averageViewPercentage, color = code)) +
  geom_vline(aes(xintercept = as.numeric(date),
                 linetype = deadline),
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Средняя доля\nвоспроизведения видео, %",
    color = "Практика",
    linetype = "Дедлайн",
    title = "Относительная продолжительность просмотра практик"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  scale_linetype_manual(
    values = c(hard = "dashed", soft = "dotted"),
    labels = c(hard = "жёсткий", soft = "мягкий")
  ) +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) -> pr_ave_views_perc

pr_ave_views_perc %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```





# Q // Квизы {#q}

## Row

```{r q-n}
q_n %>% 
  mutate(code = factor(code, 
                       ordered = TRUE, 
                       levels = paste0("Q", 1:15))) %>% 
  ggplot(aes(code, n)) +
  geom_col() +
  geom_text(aes(
    y = n - 2,
    label = (n / n_partic * 100) %>% round() %>% paste0("%")
  ),
  color = "white") +
  labs(x = "Квиз",
       y = "Количество ответов",
       title = "Прохождение квизов") -> q_passed_graph

q_passed_graph %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


## Row

```{r}
q_total_scores %>% 
  full_join(q_max_total_score,
            join_by(code)) %>% 
  mutate(ten_score = round(totalScore / max_total_score * 10),
         code = factor(code,
                       ordered = TRUE,
                       levels = paste0("Q", 1:15))) -> q_ten_scores

q_ten_scores %>% 
  summarise(mean = mean(ten_score),
            sd = sd(ten_score),
            .by = code) %>% 
  pivot_longer(-code) %>% 
  ggplot(aes(code, value, color = name, group = name)) +
  geom_line() +
  geom_point() +
  geom_hline(yintercept = c(5, 10), linetype = "dashed") +
  scale_color_discrete(labels = c(mean = "Среднее",
                                  sd = "Стандартное отклонение")) +
  labs(x = "Квиз", y = "Средний балл по 10-балльной шкале",
       color = "Метрика",
       title = "Средние баллы за квизы") -> q_means_graph

q_means_graph %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


## Row {.tabset}

```{r q1-ts-dist}
#| title: Q1

q_ten_scores %>%
  filter(code == "Q1") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q1_score_dist

q1_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q2-ts-dist}
#| title: Q2

q_ten_scores %>%
  filter(code == "Q2") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q2_score_dist

q2_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q3-ts-dist}
#| title: Q3

q_ten_scores %>%
  filter(code == "Q3") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q3_score_dist

q3_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q4-ts-dist}
#| title: Q4

q_ten_scores %>%
  filter(code == "Q4") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q4_score_dist

q4_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q5-ts-dist}
#| title: Q5

q_ten_scores %>%
  filter(code == "Q5") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q5_score_dist

q5_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q6-ts-dist}
#| title: Q6

q_ten_scores %>%
  filter(code == "Q6") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q6_score_dist

q6_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q7-ts-dist}
#| title: Q7

q_ten_scores %>%
  filter(code == "Q7") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q7_score_dist

q7_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q8-ts-dist}
#| title: Q8

q_ten_scores %>%
  filter(code == "Q8") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q8_score_dist

q8_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q9-ts-dist}
#| title: Q9

q_ten_scores %>%
  filter(code == "Q9") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q9_score_dist

q9_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q10-ts-dist}
#| title: Q10

q_ten_scores %>%
  filter(code == "Q10") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q10_score_dist

q10_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q11-ts-dist}
#| title: Q11

q_ten_scores %>%
  filter(code == "Q11") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q11_score_dist

q11_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q12-ts-dist}
#| title: Q12

q_ten_scores %>%
  filter(code == "Q12") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q12_score_dist

q12_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q13-ts-dist}
#| title: Q13

q_ten_scores %>%
  filter(code == "Q13") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q13_score_dist

q13_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q14-ts-dist}
#| title: Q14

q_ten_scores %>%
  filter(code == "Q14") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q14_score_dist

q14_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q15-ts-dist}
#| title: Q15

q_ten_scores %>%
  filter(code == "Q2") %>%
  summarise(n = n(),
            .by = ten_score) %>% 
  right_join(tibble(ten_score = 1:10)) %>% 
  replace_na(list(n = 0)) %>% 
  ggplot(aes(ten_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Балл по 10-балльной шкале",
       y = "Количество",
       title = "Распределение баллов за квиз") -> q15_score_dist

q15_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```



## Row {.tabset}

```{r q1-psy}
#| title: Q1

q_psymet_props %>%
  pivot_longer(cols = c(discrimination, difficulty)) %>% 
  separate(task_code, into = c("quiz", "task"), sep = "_") %>% 
  mutate(task = as.numeric(task)) -> q_ps_graph

q_ps_graph %>% 
  filter(code == "Q1") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q1_psy

q1_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q2-psy}
#| title: Q2

q_ps_graph %>% 
  filter(code == "Q2") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q2_psy

q2_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q3-psy}
#| title: Q3

q_ps_graph %>% 
  filter(code == "Q3") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q3_psy

q3_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q4-psy}
#| title: Q4

q_ps_graph %>% 
  filter(code == "Q4") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q4_psy

q4_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q5-psy}
#| title: Q5

q_ps_graph %>% 
  filter(code == "Q5") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q5_psy

q5_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q6-psy}
#| title: Q6

q_ps_graph %>% 
  filter(code == "Q6") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q6_psy

q6_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q7-psy}
#| title: Q7

q_ps_graph %>% 
  filter(code == "Q7") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q7_psy

q7_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q8-psy}
#| title: Q8

q_ps_graph %>% 
  filter(code == "Q8") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q8_psy

q8_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q9-psy}
#| title: Q9

q_ps_graph %>% 
  filter(code == "Q9") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q9_psy

q9_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q10-psy}
#| title: Q10

q_ps_graph %>% 
  filter(code == "Q10") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q10_psy

q10_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q11-psy}
#| title: Q11

q_ps_graph %>% 
  filter(code == "Q11") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q11_psy

q11_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q12-psy}
#| title: Q12

q_ps_graph %>% 
  filter(code == "Q12") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q12_psy

q12_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q13-psy}
#| title: Q13

q_ps_graph %>% 
  filter(code == "Q13") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q13_psy

q13_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q14-psy}
#| title: Q14

q_ps_graph %>% 
  filter(code == "Q14") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q14_psy

q14_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r q15-psy}
#| title: Q15

q_ps_graph %>% 
  filter(code == "Q15") %>%
  ggplot(aes(task, value, color = name, shape = name)) +
  geom_point(size = 2) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  scale_x_continuous(breaks = 1:20) +
  scale_color_manual(values = c(difficulty = "blue3", 
                                discrimination = "red3")) +
  labs(x = "Задание", y = "Значение", color = "Метрика", shape = "Метрика") -> q15_psy

q15_psy %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


# HW // Домашки {#hw}


## Row

```{r hws-ns}
hws_ns %>% # pull(hw) %>% unique()
  mutate(hw = factor(hw,
                     ordered = TRUE,
                     levels = paste0("HW", 1:16))) %>% 
  ggplot(aes(hw, n)) +
  geom_col() +
  geom_text(aes(
    y = n - 2,
    label = (n / n_partic * 100) %>% round() %>% paste0("%")
  ),
  color = "white") +
  labs(
    x = "Домашка",
    y = "Количество сданных домашек",
    title = "Динамика сдачи домашек",
    caption = "лейблы отображают процент не сдавших"
  ) -> hw_ns_graph

hw_ns_graph %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hws-mean-scores}
hws_scores %>%
  group_by(hw) %>%
  summarise(mean = mean(score) %>% round(2),
            sd = sd(score) %>% round(2)) %>%
  pivot_longer(-hw,
               names_to = "stat") %>%
  ggplot(aes(hw, value, color = stat, group = stat)) +
  geom_line() +
  geom_point(shape = 21, size = 2) +
  geom_hline(yintercept = 20, linetype = "dashed", color = "gray50") + 
  geom_hline(yintercept = 30, linetype = "dotted", color = "gray50") + 
  scale_color_discrete(labels = c(mean = "Среднее",
                                  sd = "Стандартное отклонение")) +
  labs(
    x = "Домашка",
    y = "Значение",
    color = "Метрика",
    title = "Средний балл по сданным домашкам"
  ) -> hw_mean_score

hw_mean_score %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```




## Row

```{r hws-scores}
hws_scores %>%
  ggplot(aes(score)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~ hw) +
  labs(x = "Балл",
       y = "Количество",
       title = "Распределение баллов домашек") -> hw_score_dist

hw_score_dist %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


## Row {.tabset}

```{r hw1-tab}
#| title: HW1

hw_tasks %>%
  filter(hw == "HW1") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw1_stats

hw1_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw2-tab}
#| title: HW2

hw_tasks %>%
  filter(hw == "HW2") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw2_stats

hw2_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw3-tab}
#| title: HW3

hw_tasks %>%
  filter(hw == "HW3") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw3_stats

hw3_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw4-tab}
#| title: HW4

hw_tasks %>%
  filter(hw == "HW2") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw4_stats

hw4_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw5-tab}
#| title: HW5

hw_tasks %>%
  filter(hw == "HW5") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw5_stats

hw5_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw6-tab}
#| title: HW6

hw_tasks %>%
  filter(hw == "HW6") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw6_stats

hw6_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw7-tab}
#| title: HW7

hw_tasks %>%
  filter(hw == "HW7") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw7_stats

hw7_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw8-tab}
#| title: HW8

hw_tasks %>%
  filter(hw == "HW8") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw8_stats

hw8_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw9-tab}
#| title: HW9

hw_tasks %>%
  filter(hw == "HW9") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw9_stats

hw9_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw10-tab}
#| title: HW10

hw_tasks %>%
  filter(hw == "HW10") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw10_stats

hw10_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw11-tab}
#| title: HW11

hw_tasks %>%
  filter(hw == "HW11") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw11_stats

hw11_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw12-tab}
#| title: HW12

hw_tasks %>%
  filter(hw == "HW12") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw12_stats

hw12_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw13-tab}
#| title: HW13

hw_tasks %>%
  filter(hw == "HW13") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw13_stats

hw13_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw14-tab}
#| title: HW14

hw_tasks %>%
  filter(hw == "HW14") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw14_stats

hw14_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw15-tab}
#| title: HW15

hw_tasks %>%
  filter(hw == "HW15") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw15_stats

hw15_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

```{r hw16-tab}
#| title: HW16

hw_tasks %>%
  filter(hw == "HW16") %>%
  drop_na() %>%
  mutate(score = as.numeric(score)) %>% 
  left_join(hws_scores %>%
              rename(total_score = score),
            join_by(ID, hw)) %>%
  group_by(task, level) %>%
  summarise(
    ns_prop = mean(is.na(score)) %>% round(2),
    difficulty = (mean(score, na.rm = TRUE) / 2) %>% round(2),
    discrimination = cor(score, total_score) %>% round(2)
  ) %>%
  replace_na(list(discrimination = 0)) %>%
  pivot_longer(-c(task, level), names_to = "metrics") %>%
  ggplot(aes(task,
             value,
             shape = metrics,
             fill = level,
             color = level)) +
  geom_point(size = 2, alpha = .7) +
  geom_hline(
    yintercept = c(.1, .9),
    linetype = "dashed",
    color = "gray50"
  ) +
  geom_hline(
    yintercept = c(.25),
    linetype = "dotted",
    color = "gray50"
  ) +
  # scale_x_continuous(breaks = 1:15) +
  scale_fill_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_color_manual(
    values = c(
      easy = aesth$levels$easy,
      medium = aesth$levels$medium,
      hard = aesth$levels$hard,
      extreme = aesth$levels$extreme
    )
  ) +
  scale_shape_manual(
    values = c(
      difficulty = aesth$metrics$difficilty,
      ns_prop = aesth$metrics$ns_prop,
      discrimination = aesth$metrics$discrimination
    )
  ) +
  labs(
    x = "Задание",
    y = "Значение",
    shape = "Метрика",
    fill = "Уровень сложности",
    color = "Уровень сложности"
  ) -> hw16_stats

hw16_stats %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```





# С // Консультации {#c}


## Row

```{r c-graph-presence}
cons %>%
  ggplot(aes(consultation, percentage, group = 1)) +
  geom_line() +
  geom_point() +
  scale_y_continuous(limits = c(0, 1)) +
  labs(x = "Консультация",
       y = "Доля присутствовавших",
       title = "Динамика посещения консультаций") -> cons_visits

cons_visits %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

<!---
## Row

```{r cons-views-by-day, eval=FALSE}
calendar_assessment %>%
  filter(str_detect(code, "^HW")) %>%
  ggplot() +
  geom_line(data = cons_videos,
            aes(day, views, color = code)) +
  geom_vline(aes(xintercept = as.numeric(date),
                 linetype = deadline),
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Количество просмотров",
    color = "Лекция",
    linetype = "Дедлайн",
    title = "Динамика просмотров записей консультаций"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  scale_linetype_manual(
    values = c(hard = "dashed", soft = "dotted"),
    labels = c(hard = "жёсткий", soft = "мягкий")
  ) +
  theme(axis.text.x = element_text(angle = 90)) -> cons_views

cons_views %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


```{r cons-views-cumsum, eval=FALSE}
calendar_assessment %>%
  filter(str_detect(code, "^HW")) %>%
  ggplot() +
  geom_line(
    data = cons_videos %>%
      group_by(video) %>%
      mutate(cum_views = cumsum(views)),
    aes(day, cum_views, color = code)
  ) +
  geom_vline(aes(xintercept = as.numeric(date),
                 linetype = deadline),
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Количество просмотров",
    color = "Лекция",
    title = "Кумулятивная сумма просмотров записей консультаций"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  scale_linetype_manual(
    values = c(hard = "dashed", soft = "dotted"),
    labels = c(hard = "жёсткий", soft = "мягкий")
  ) +
  theme(axis.text.x = element_text(angle = 90)) -> cons_cumsum

cons_cumsum %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


## Row

```{r cons-ave-view-dur-by-day, eval=FALSE}
calendar_assessment %>%
  filter(str_detect(code, "^HW")) %>%
  ggplot() +
  geom_line(data = cons_videos,
            aes(day, averageViewDuration, color = code)) +
  geom_vline(aes(xintercept = as.numeric(date),
                 linetype = deadline,),
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Средняя продолжительность\nвоспроизведения видео, с",
    color = "Практика",
    linetype = "Дедлайн",
    title = "Абсолютная продолжительность просмотра конслультаций"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  scale_linetype_manual(
    values = c(hard = "dashed", soft = "dotted"),
    labels = c(hard = "жёсткий", soft = "мягкий")
  ) +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) -> cons_ave_views_dur

cons_ave_views_dur %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


```{r cons-ave-view-perc-by-day, eval=FALSE}
calendar_assessment %>%
  filter(str_detect(code, "^HW")) %>%
  ggplot() +
  geom_line(data = cons_videos,
            aes(day, averageViewPercentage, color = code)) +
  geom_vline(aes(xintercept = as.numeric(date),
                 linetype = deadline),
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Средняя доля\nвоспроизведения видео, %",
    color = "Практика",
    linetype = "Дедлайн",
    title = "Относительная продолжительность просмотра консультаций"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  scale_linetype_manual(
    values = c(hard = "dashed", soft = "dotted"),
    labels = c(hard = "жёсткий", soft = "мягкий")
  ) +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) -> cons_ave_views_perc

cons_ave_views_perc %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

--->


# A // Разборы {#a}


## Row

```{r a-views-by-day}
calendar_assessment %>%
  filter(str_detect(code, "^HW")) %>%
  ggplot() +
  geom_line(data = a_videos,
            aes(day, views, color = code)) +
  geom_vline(aes(xintercept = as.numeric(date),
                 linetype = deadline),
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Количество просмотров",
    color = "Лекция",
    linetype = "Дедлайн",
    title = "Динамика просмотров разборов"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  scale_linetype_manual(
    values = c(hard = "dashed", soft = "dotted"),
    labels = c(hard = "жёсткий", soft = "мягкий")
  ) +
  theme(axis.text.x = element_text(angle = 90)) -> a_views

a_views %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


```{r a-views-cumsum}
calendar_assessment %>%
  filter(str_detect(code, "^HW")) %>%
  ggplot() +
  geom_line(
    data = a_videos %>%
      group_by(video) %>%
      mutate(cum_views = cumsum(views)),
    aes(day, cum_views, color = code)
  ) +
  geom_vline(aes(xintercept = as.numeric(date),
                 linetype = deadline),
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Количество просмотров",
    color = "Лекция",
    title = "Кумулятивная сумма просмотров разборов"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  scale_linetype_manual(
    values = c(hard = "dashed", soft = "dotted"),
    labels = c(hard = "жёсткий", soft = "мягкий")
  ) +
  theme(axis.text.x = element_text(angle = 90)) -> a_views_cumsum

a_views_cumsum %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


## Row

```{r a-ave-view-dur-by-day}
calendar_assessment %>%
  filter(str_detect(code, "^HW")) %>%
  ggplot() +
  geom_line(data = a_videos,
            aes(day, averageViewDuration, color = code)) +
  geom_vline(aes(xintercept = as.numeric(date),
                 linetype = deadline,),
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Средняя продолжительность\nвоспроизведения видео, с",
    color = "Практика",
    linetype = "Дедлайн",
    title = "Абсолютная продолжительность просмотра разборов"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  scale_linetype_manual(
    values = c(hard = "dashed", soft = "dotted"),
    labels = c(hard = "жёсткий", soft = "мягкий")
  ) +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) -> a_ave_views_dur

a_ave_views_dur %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```


```{r a-ave-view-perc-by-day}
calendar_assessment %>%
  filter(str_detect(code, "^HW")) %>%
  ggplot() +
  geom_line(data = a_videos,
            aes(day, averageViewPercentage, color = code)) +
  geom_vline(aes(xintercept = as.numeric(date),
                 linetype = deadline),
             color = "gray70") +
  geom_text(aes(x = date,
                y = 0,
                label = code)) +
  labs(
    x = "Дата",
    y = "Средняя доля\nвоспроизведения видео, %",
    color = "Практика",
    linetype = "Дедлайн",
    title = "Относительная продолжительность просмотра разборов"
  ) +
  scale_x_date(date_breaks = "week",
               date_minor_breaks = "day") +
  scale_linetype_manual(
    values = c(hard = "dashed", soft = "dotted"),
    labels = c(hard = "жёсткий", soft = "мягкий")
  ) +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) -> a_ave_views_perc

a_ave_views_perc %>% 
  ggplotly() %>% 
  layout(legend = list(
    orientation = "h",
    x = 0, y = -.3
  ))
```

# J // Промежуточный проект {#j}

## Row

```{r j-sent}
j_journal %>% 
  select(ID, matches("сдано")) %>% 
  pivot_longer(-ID) %>% 
  mutate(value = as.logical(value)) %>% 
  summarise(n = sum(value),
            .by = name) %>% 
  ggplot(aes(name, n)) +
  geom_col() +
  geom_text(aes(y = n - 1,
                label = round(n / n_partic * 100) %>% paste0("%")),
            color = "white") +
  labs(x = "Группа по дедлайну",
       y = "Количество",
       title = "J // Сдача проекта") -> j_sent

j_sent %>% ggplotly()
```

```{r j-forms}
j_journal %>% 
  select(ID, Вариант) %>% 
  drop_na() %>% 
  summarise(n = n(),
            .by = Вариант) %>% 
  ggplot(aes(Вариант, n)) +
  geom_col() +
  labs(y = "Количество",
       title = "J // Выбор вариантов") -> j_forms

j_forms %>% ggplotly()
```

## Row

```{r j-total-score}
j_journal %>% 
  filter(TOTAL != "NS") %>% 
  select(ID, all_of(paste0("K", 1:9))) %>% 
  pivot_longer(cols = -ID) %>% 
  mutate(value = as.numeric(value)) %>% 
  summarise(total_score = sum(value),
            .by = ID) -> j_total_score

j_total_score %>% 
  summarise(n = n(),
            .by = total_score) %>% 
  ggplot(aes(total_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = seq(0, 17, .5)) +
  labs(x = "Количество",
       y = "Балл",
       title = "J // Распределение суммарного балла за проект") -> j_total_score_graph

j_total_score_graph %>% ggplotly()
```

## Row

```{r j-criteria}
tibble(K1 = 2,
       K2 = 1,
       K3 = 2,
       K4 = 2,
       K5 = 2,
       K6 = 1,
       K7 = 4,
       K8 = 2,
       K9 = 1) %>% 
  pivot_longer(cols = everything()) -> j_criteria_max

j_journal %>% 
  filter(TOTAL != "NS") %>% 
  select(ID, all_of(paste0("K", 1:9))) %>% 
  pivot_longer(cols = -ID) %>% 
  mutate(value = as.numeric(value)) %>% 
  summarise(mean = mean(value),
            .by = name) %>% 
  full_join(j_criteria_max,
            join_by(name)) %>% 
  mutate(difficulty = mean / value) -> j_criteria_difficulty

j_journal %>% 
  filter(TOTAL != "NS") %>% 
  select(ID, all_of(paste0("K", 1:9))) %>% 
  pivot_longer(cols = -ID) %>% 
  mutate(value = as.numeric(value)) %>% 
  ggplot(aes(name, value)) +
  geom_point(position = position_jitter(width = .2, height = 0),
             alpha = .3) +
  geom_point(data = j_criteria_difficulty,
             aes(name, mean),
             color = "red3", size = 3) +
  labs(x = "Критерий",
       y = "Балл",
       title = "J // Распределение баллов по критериям") -> j_criteria

j_criteria %>% ggplotly()
```

## Row

```{r j-difficulty}
j_criteria_difficulty %>% 
  ggplot(aes(name, difficulty)) +
  geom_hline(yintercept = c(0.05, 0.95), linetype = "dashed") +
  geom_point() +
  labs(x = "Критерий",
       y = "Балл",
       title = "J // Трудность критериев") -> j_difficulty

j_difficulty %>% ggplotly()
```


# F // Итоговый проект {#f}

## Row

```{r f-sent}
f_journal %>% 
  select(ID, `Не сдано`) %>% 
  summarise(n = n(),
            .by = `Не сдано`) %>% 
  mutate(p = round(n / sum(n) * 100, 2)) %>% 
  ggplot(aes(`Не сдано`, n)) +
  geom_col() +
  geom_text(aes(y = n - 1,
                label = p %>% paste0("%")),
            color = "white") +
  scale_x_discrete(labels = c(`FALSE` = "Да", `TRUE` = "Нет")) +
  labs(x = "Сдано",
       y = "Количество",
       title = "F // Сдача проекта") -> f_sent

f_sent %>% ggplotly()
```

## Row

```{r f-total-score}
f_journal %>% 
  filter(TOTAL != "NS") %>% 
  select(ID, matches("^F\\d_K\\d$")) %>% 
  pivot_longer(cols = -ID) %>% 
  mutate(value = as.numeric(value)) %>% 
  summarise(total_score = sum(value),
            .by = ID) -> f_total_score

f_total_score %>% 
  summarise(n = n(),
            .by = total_score) %>% 
  ggplot(aes(total_score, n)) +
  geom_col() +
  scale_x_continuous(breaks = seq(0, 20, .5)) +
  labs(x = "Количество",
       y = "Балл",
       title = "F // Распределение суммарного балла за проект") -> f_total_score_graph

f_total_score_graph %>% ggplotly()
```

## Row

```{r f-criteria}
tibble(F1_K1 = 3,
       F1_K2 = 2,
       F1_K3 = 3,
       F1_K4 = 2,
       F2_K1 = 2,
       F2_K2 = 2,
       F2_K3 = 2,
       F2_K4 = 2,
       F2_K5 = 2) %>% 
  pivot_longer(cols = everything()) -> f_criteria_max

f_journal %>% 
  filter(TOTAL != "NS") %>% 
  select(ID, matches("^F\\d_K\\d$")) %>% 
  pivot_longer(cols = -ID) %>% 
  mutate(value = as.numeric(value)) %>% 
  summarise(mean = mean(value),
            .by = name) %>% 
  full_join(f_criteria_max,
            join_by(name)) %>% 
  mutate(difficulty = mean / value) -> f_criteria_difficulty

f_journal %>% 
  filter(TOTAL != "NS") %>% 
  select(ID, matches("^F\\d_K\\d$")) %>% 
  pivot_longer(cols = -ID) %>% 
  mutate(value = as.numeric(value)) %>% 
  separate(name, into = c("stage", "criterion"), sep = "_") %>% 
  ggplot(aes(criterion, value)) +
  geom_point(position = position_jitter(width = .2, height = 0),
             alpha = .3) +
  geom_point(data = f_criteria_difficulty %>% separate(name, into = c("stage", "criterion"), sep = "_"),
             aes(criterion, mean),
             color = "red3", size = 3) +
  facet_wrap(~ stage, ncol = 1, scales = "free") +
  labs(x = "Критерий",
       y = "Балл",
       title = "F // Распределение баллов по критериям") -> f_criteria

f_criteria %>% ggplotly()
```

## Row

```{r f-difficulty}
f_criteria_difficulty %>% 
  separate(name, into = c("stage", "criterion"), sep = "_") %>% 
  ggplot(aes(criterion, difficulty)) +
  geom_hline(yintercept = c(0.05, 0.95), linetype = "dashed") +
  geom_point() +
  facet_wrap(~ stage, ncol = 1, scales = "free") +
  labs(x = "Критерий",
       y = "Балл",
       title = "F // Трудность критериев") -> f_difficulty

f_difficulty %>% ggplotly()
```
