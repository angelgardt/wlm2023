# L3 // Математика для анализа данных

{{< include ../other/_symbols.qmd >}}

```{r opts, eval=TRUE, echo=FALSE, warning=FALSE, message=FALSE}
knitr::opts_chunk$set(eval = TRUE, echo = FALSE, message = FALSE, warning = FALSE)
```

## Дискретная математика

### Алгебра логики

Логика исследует закономерности мышления, но делает это отлично от того, как этим занимается, например, психология. Формальная логика абстрагируется от связей мышления с какими-либо сторонами сознания и сосредотачивается на логической непротиворечивости и последовательности мышления. Таким образом, **формальная логика --- это наука об общих структурах правильного мышления в его языковой форме** [@segeth85].

Логика --- это нормативная наука, то есть она определяет, как оно должно быть, в то время как, например, психология исследует как оно есть и как и почему логические законы нарушаются.

#### Высказывания

Логика как наука имеет дело, прежде всего, с высказываниями. Высказывание отражает определённую объективную[^1] связь между предметами. Высказывание *истинно*, если в нём содержится адеквантное отражение этой связи --- в ином случае высказывание *ложно*. В общем случае высказывание существует с форме повествовательного предложения.

[^1]: Обсуждение критериев объективности мы оставим за рамками этого курса и постулируем, что мы их как-то хотя бы интуитивно пониманием. Для некоторой концептуальной рамки обозначим следующее: мы говорим об объективной связи между предметами, если (1) определённым предметам (или индивидам) присущи определённые признаки и если (2) определённым признакам свойственны определённые признаки [@segeth85].

Например, высказывание «Земля вращается вокруг Солнца» отражает объективное отношение, поэтому оно истинно, а высказывание «страницы этой книги зелёного цвета» не адекватно отражает существующее положение дел, поэтому оно ложно.

Прежде всего, нас будут интересовать **атомарные высказывания**. Это элементарные высказывания, которые невозможно разделить на составляющие --- более мелкие высказывания. Например, «четыре --- это целое число» --- это атомарное высказывание.

Атомарные высказывания могут быть **либо истинны, либо ложны**. Почему? Потому что мы находимся в рамках двузначной логики[^2]. Атомарные высказывания могут быть обозначены *пропозициональными переменными*. Так же как и числа в математике могут быть заменены буквеными обозначениями для *абстрагирования от значения числа*, так же и высказывания заменяются переменными для *абстрагирования от содержания высказывания*.

Для обозначения пропозициональных переменных используются латинские буквы. А так как само высказывания имеет определённое значение истинности (*истина* и *ложь*), то и переменная, которой мы обозначаем это высказывание, также будет обладать этим же значением истинности. Всё аналогично математике.

[^2]: Есть и другие подходы к определению истинности высказываний --- таковы различные виды многозначной логики. Но они не-необходимы нам для целей курса, поэтому оставим их за бортом.

#### Логические операции

С атомарными высказываниями можно выполнять различные логические операции.

##### Инверсия

Самая простая операция --- **инверсия, или отрицание**. Оно обозначается с помощью оператора $\neg$. Это унарная операция, то есть она применяется к одной переменной. При отрицании значение истинности высказывания изменяется на противоположное, поэтому мы можно составить следующую таблицу истинности для отрицания:

| $p$    | $\neg p$ |
|:------:|:--------:|
| истина | ложь     |
| ложь   | истина   |

В данном случае с помощью переменной $p$ обозначено некоторое атомарное высказывание.

Особо стоит отметить, что при отрицании отрицается всё высказывание целиком, а не какой-то отдельный его элемент. То есть формально правильным вариантом отрицания высказывания «все лебеди белые» будет следующий --- «неверно, что все лебеди белые».

Графически инверсия отображается так:

<center>
<figure>
<img src="pics/negation.png">
<figcaption>Логическое отрицание</figcaption>
</figure>
</center>

***

Из атомарных высказываний можно составлять сложные высказывания при помощи логических операторов. Например, высказывание «если четыре делится на два, то четыре --- чётное число» является сложным, посколько состоит из двух атомарных --- «четыре делится на два» и «четыре --- чётное число» --- соединённых союзом «если…, то…».

Далее мы пристумаем с знакомству с бинарными операторами, то есть такими, которые функционируют на двух аргументах.


##### Конъюнкция

**Конъюнкция (логическое умножение, логические И)** представляет собой такое высказывание, которое наиболее точно передается следующей конструкцией естественного языка --- «как $p$, так и $q$».

$p$ и $q$ в данном случае пропозициональные переменные, которые заменяют конкретные высказывания. Конъюнкция истинна тогда и только тогда, когда обе пропозициональные переменные, входящие в её состав, имеют значение истинности «истина». В любом ином случае конъюнкция ложна.

Конъюнкция обозначается символом $\wedge$ и имеет следующую таблицу истинности:

|   $p$  |   $q$  | $p \wedge q$ |
|:------:|:------:|:------------:|
| истина | истина | истина       |
| истина | ложь   | ложь         |
| ложь   | истина | ложь         |
| ложь   | ложь   | ложь         |

Графически конъюнкция отображается так:

<center>
<figure>
<img src="pics/and.png">
<figcaption>Конъюнкция (логическое И)</figcaption>
</figure>
</center>

##### Дизъюнкция

**Дизъюнкция (логическое сложение, логические ИЛИ)** представляет собой такое высказывание, которое наиболее точно передается следующей конструкцией естественного языка --- «или $p$, или $q$, или и то и другое», поэтому дизъюнкция истинна тогда, когда хотя бы одна пропозициональная переменная, входящая в её состав, имеет значении истинности «истина». В случае, если оба высказывания ложны, дизъюнкция будет ложна.

Дизъюнкция обозначается символом $\vee$ и имеет следующую таблицу истинности:

|   $p$  |   $q$  | $p \vee q$ |
|:------:|:------:|:------------:|
| истина | истина | истина       |
| истина | ложь   | истина       |
| ложь   | истина | истина       |
| ложь   | ложь   | ложь         |


Графически дизъюнкция отображается так:

<center>
<figure>
<img src="pics/or.png">
<figcaption>Дизъюнкция (логическое ИЛИ)</figcaption>
</figure>
</center>

##### Разделительная дизъюнкция

**Разделительная дизъюнкция (исключающее ИЛИ)** --- это такое высказывание, которое наиболее полно описывается следующим выражением естественного языка --- «либо $p$, либо $q$». На её графическом представлении хорошо видно, чем она отличается от обычной дизъюнкции --- она исключает ту часть пространства, где верны оба высказывания:

<center>
<figure>
<img src="pics/xor.png">
<figcaption>Разделительная дизъюнкция (исключающее ИЛИ)</figcaption>
</figure>
</center>

Для обозначения разделительно дизъюнкции есть много различных операторов, но мы будем записывать её так --- $p \xor q$. По иллюстрации можно восстановить таблицу истинности для этого оператора:

|   $p$  |   $q$  | $p \xor q$ |
|:------:|:------:|:----------------:|
| истина | истина | ложь             |
| истина | ложь   | истина           |
| ложь   | истина | истина           |
| ложь   | ложь   | ложь             |

Таким образом, видно, что исключающее ИЛИ истинно тогда, когда значения истинности пропозициональных переменных, входящих в сложное высказывание, различны.


#### Условные высказывания

##### Импликация

Сложное высказывание, описываемое конструкцией естественного языка «если $p$, то $q$» в формальной логике носит название импликации. Она отражает следование одного утверждения из другого и обозначается следующим образом --- $p \rightarrow q$. Высказывание $p$ называется *антецедентом* импликации, а $q$ --- *консеквентом* импликации.

Импликация имеет следующую таблицу истинности:

|   $p$  |   $q$  | $p \rightarrow q$ |
|:------:|:------:|:-----------------:|
| истина | истина | истина            |
| истина | ложь   | ложь              |
| ложь   | истина | истина            |
| ложь   | ложь   | истина            |

Как видно из таблицы, импликация ложна только тогда, когда её антецедент истинен, а консеквент --- ложен. Но что более интересно, так это то, что, согласно таблице, из ложного утверждения может следовать любое. Это факт мы вспомним, когда будем обсуждать тестирование статистических гипотез.

Импликация утвержает то же самое, что и следующее сложное высказывание --- $\neg (p \wedge \neg q)$. Отсюда можно получить графическое изображение импликации:

<center>
<figure>
<img src="pics/implication.png">
<figcaption>Импликация $p \rightarrow q$</figcaption>
</figure>
</center>



##### Репликация

Репликация похожа на импликацию, но действует как бы в обратном направлении, что отражено в её обозначении --- $p \leftarrow q$. Эта конструкция читается как «$p$ реплицирует $q$» и является эквивалентом естественноязыкового «только если $p$, то $q$». Соответствующим образом изменяется и таблица истиности:

|   $p$  |   $q$  | $p \leftarrow q$ |
|:------:|:------:|:----------------:|
| истина | истина | истина           |
| истина | ложь   | истина           |
| ложь   | истина | ложь             |
| ложь   | ложь   | истина           |

Идея здесь в том, что если мы получили в результате истину, то лжи в начале быть не могло. Графическое изображение репликации выглядит так:


<center>
<figure>
<img src="pics/replication.png">
<figcaption>Репликация $p \leftarrow q$</figcaption>
</figure>
</center>


##### Эквиваленция

Если мы соединим с помощью конъюнкции импликацию и репликацию, то есть запишем вот такое высказывание --- $(p \rightarrow q) \wedge (p \leftarrow q)$ --- то получим эквиваленцию. По своей сути она является логическим отражением языковой конструкции «$q$ только тогда, когда $p$», поэтому она обозначается вот так --- $p \leftrightarrow q$ --- и её таблица истинности выглядит соответствующим образом:

|   $p$  |   $q$  | $p \leftrightarrow q$ |
|:------:|:------:|:---------------------:|
| истина | истина | истина                |
| истина | ложь   | ложь                  |
| ложь   | истина | ложь                  |
| ложь   | ложь   | истина                |


Из неё выводится графическое представление эквиваленции:

<center>
<figure>
<img src="pics/equivalence.png">
<figcaption>Эквиваленция $p \leftrightarrow q$</figcaption>
</figure>
</center>


### Элементы теории множеств

На базе теории множеств стоит вся современная математика. Мы ознакомимся только c некоторыми концепциями этого раздела математики, но вообще полезно с ним познакомиться гораздо глубже.

#### Множество

Понятие множества неопределимо. По крайней мере силами самой теории множеств. Но мы будем понимать под множеством **совокупность, или набор, некоторых (в общем случае любых) объектов**. Это могут быть числа, буквы, точки и любые другие объекты. Объекты, входящие в состав множества, называются элементами этого множества.

Множества обозначают заглавными латинскими буквами (например, $A$), а его элементы --- прописными латинскими буквами (например, $a_1$, $a_2$ и т. д.).

Множества удобно изображать кружочками. Примерно так:

<center>
<figure>
<img src="pics/set-a.png">
<figcaption>Множество $А$, содержащее элементы $a_1$, $a_2$, $a_3$, $a_4$, $a_5$</figcaption>
</figure>
</center>

Если элемент входит в данное множество, то мы говорим, что этот **элемент принадлежит данному множеству**, и записываем это следующим образом:

$$ a_i \in A $$

Символ $\in$ читается как «принадлежит».

Если мы хотим задать множество через перечисление элементов, то можно это сделать с помощью фигурных скобок вот так:

$$ B = \{ 0,1,2,3,4,5 \} $$

В данном случае множество $B$ содержит 6 элементов --- числа от нуля до пяти.

Приведём примеры множеств.

* Множество букв русского алфавита: $L = \{ а, б, в, г, д, \dots, э, ю, я \}$
* Множество всех натуральных чисел: $\setN = \{ 0, 1, 2, 3, \dots \}$
* Множество всех целых чисел: $\setZ = \{0, 1, -1, 2, -2, 3, -3, \dots \}$
 

Также из числовых множеств мы можем вспомнить рациональные числа $\setQ$, действительные (вещественные) числа $\setR$ и комплексные числа $\setC$.

Мы можем взять и рассмотреть не все элементы какого-то множества, а какую-то их часть. Например, взять элементы $a_1$ и $a_2$ и объединить их в множество поменьше.

<center>
<figure>
<img src="pics/set-a1.png">
<figcaption>Множество $А_1$, состоящее из элементов $a_1$ и $a_2$, является подмножеством множества $A$</figcaption>
</figure>
</center>

Мы получим множество $A_1 = \{a_1, a_2\}$, которое является **подмножеством** множества $A$. Иначе говоря, множество $A_1$ включается во множество $A$:

$$
A_1 \subset A
$$

В частности, множество натуральных чисел включается во множество целых $\setN \subset \setZ$. А если продолжить эту цепочку, то можно получить следующую иерархию числовых множеств:

$$
\setN \subset \setZ \subset \setQ \subset \setR \subset \setC
$$

Тривиальными подмножествами любого множества является пустое множество $\varnothing$ и само это множество. Пусть $M$ --- любое множество. Тогда можно записать два справедливых утверждения:

$$
\varnothing \subset M
$$

$$
M \subset M
$$


#### Операции над множествами

##### Объединение

Над множествами можно производить определённые операции. Во-первых, множества можно **складывать, или объединять**:

$$
A + B = A \cup B = \{ x : x \in A \vee x \in B \}
$$

Тогда в новом множестве окажутся все элементы обоих исходных множеств.

<center>
<figure>
<img src="pics/union.png">
<figcaption>Объединение множеств $A$ и $B$</figcaption>
</figure>
</center>


##### Пересечение

Во-вторых, множества можно **умножать, или находить их пересечение**:

$$
A \cdot B = A \cap B = \{ x : x \in A \wedge x \in B \}
$$

Тогда в новом множестве окажутся те элементы, которые принадлежат обоим множествам сразу.

<center>
<figure>
<img src="pics/intersection.png">
<figcaption>Пересечение множеств $A$ и $B$</figcaption>
</figure>
</center>



##### Разность множеств

В-третьих, можно искать **разность множеств**:

$$
A ∖ B = \{ x : x \in A \wedge x \notin B \}
$$

<center>
<figure>
<img src="pics/difference.png">
<figcaption>Разность множеств $A$ и $B$</figcaption>
</figure>
</center>

В частности, если мы будем искать разность между универсумом $U$ --- множеством, которое содержит вообще все возможные элементы --- и множеством $A$, мы получим **дополнение** множества $A$:

$$
U ∖ A = A^c = \bar A = \{ x : x \notin A \}
$$

<center>
<figure>
<img src="pics/complement.png">
<figcaption>Дополнение множества $A$</figcaption>
</figure>
</center>


##### Симметрическая разность

А ещё можно вычитать множества друг из друга, то есть искать их **симметрическую разность**:

$$
A \, \Delta \, B = ( A ∖ B ) \cup ( B ∖ A ) = \{ x : x \in A \text{XOR} x \in B \}
$$

<center>
<figure>
<img src="pics/symm-difference.png">
<figcaption>Симметрическая разность множеств $A$ и $B$</figcaption>
</figure>
</center>



##### Декартово произведение

Ну, и самое красивое --- **декартово произведение** двух множеств. Пусть у нас есть два множества $A$ и $B$. Тогда их декартово произведение представляет собой множество всех возможных упорядоченных пар $(a,b), a \in A, b \in B$.

$$
A \times B = \{ (a,b) : a \in A, b \in B \}
$$

<center>
<figure>
<img src="pics/decart-prod.png">
<figcaption>Декартово произведение множеств $A$ и $B$</figcaption>
</figure>
</center>

Упорядоченность подразумевает, что если мы будем перемножать $A \times B$, то будут получаться пары $(a,b)$, а если $B \times A$, то пары $(b,a)$.

К слову, вспомните координатную плоскость --- это ни что иное, как декартово произведение двух координатных прямых: $\setR \times \setR = \setR^2 = \{ (x, y) : x \in \setR, y \in \setR \}$.


#### Отображения

Мы можем сопоставлять элементы много множества элементам другого. Тогда мы получим **отображение**. Например, мы можем взять множество букв латинского алфавита и сопоставить каждому элементу этого множества число, которое будет соответствовать позиции буквы в алфавите. Пусть у нас есть множество букв латинского алфавита $L$:

$$
L = \{ \text{a}, \text{b}, \text{c}, \text{d},\dots, \text{x}, \text{y}, \text{z} \}
$$

и множество натуральных чисел от 1 до 26 $N$:

$$
N = \{ 1,2,3, \dots,24,25,26 \}
$$

Тогда мы можем задать такое отображение $F$

$$
F : L \rightarrow N,
$$

где каждой букве будет соответствовать её порядковый номер в алфавите.

Мы обозначили отображение буквой $F$, которой в математике часто обозначают функции --- это не случайно. Не вдаваясь в детали, можно сказать, что термины «отображение» и «функция» --- синонимы. Ведь по сути что делает [математическая] функция? Сопоставляет между собой значения числовых множеств. То есть отображает одно числовое множество в другое. Множество $L$ в примере выше будет областью определения функции (domain), а множество $N$ --- множеством её значений (range)[^range_func].

[^range_func]: В общем случае множеством значений может быть какое-либо подмножество этого множества. Так, мы вполне можем написать, что $F: L \rightarrow \setN$ --- это будет корректное утверждение. Однако множество значений функции теперь является подмножеством множества натуральных чисел.

Например, простая функция $y = x$, $x \in \setR$, $y \in \setR$ отображает множество вещественных чисел в само себя --- $F : \setR \rightarrow \setR$. Функция модуля $y = |x|$ отображает множество вещественных чисел во множество положительных вещественных чисел --- $F : \setR \rightarrow \setR_{+}$. И так далее.

В случае с буквами мы могли бы задать функцию $f(l) = n$, $l \in L$, $n \in N$ которая возвращала бы следующие результаты:

$$
f(\text{a}) = 1, \quad f(\text{b}) = 2, \quad f(\text{z}) = 26
$$

<center>
<figure>
<img src="pics/set-func.png">
<figcaption>Отображение $F : L \rightarrow N$</figcaption>
</figure>
</center>

#### Мощность множества

Множества могут содержать разное количество элементов. Характеристика, описывающая, сколько элементов содержит данное множество, называется **мощностью множества**.

Во-первых, множества могут быть **конечными** и **бесконечными**.

* Если множество конечно, то его мощность равна количеству его элементов.
    * Например, множество очков, которое может выпаcть на стандартном игральном кубике --- это $S_1 = \{1,2,3,4,5,6\}$. Его мощность равна 6 --- $|S_1| = 6$.
    * Множество значений пятибалльной шкалы Ликерта --- это $S_2 = \{1, 2, 3, 4, 5\}$. Его мощность равна 5 --- $|S_2| = 5$.
* Если множество бесконечно, то надо понять, *насколько оно бесконечно*.

Бесконечности бывают разного размера. В детали мы погружать не будем, однако отметим, что есть два вида бесконечностей.

* Если можно построить отображение, в котором каждом элементу некоторого множества $S$ будет сопоставлено единственное натуральное число[^3], то такое множество называется **счётным**.
    * Это значит, что элементов во множестве $S$ бесконечное количество --- так как количество натуральных чисел бесконечно --- однако при неограниченном количестве времени их все-таки можно пересчитать.
    * Мощность такого множества обозначается $\aleph_0$, то есть $|\setN| = \aleph_0$.
* Если количество элементов множества больше количества натуральных чисел, то такое множество обладает **мощностью континуума** $\aleph_1$.
    * Это множество будет равномощно множеству вещественных чисел $\setR$.

[^3]: Такое отображение называется *биекцией*.

Возможно, это звучит весьма контринтуитивно --- как одна бесконечность может быть больше другой? --- однако это так: [вещественных чисел больше, чем натуральных](https://www.youtube.com/watch?v=SrU9YDoXE88).



### Элементы комбинаторики

#### Перестановки

Представим такую задачу: на черной пятнице мы накупили книг по анализу данных, и нам необходимо расставить их на полке. Всего у нас есть пять книг. Сколькими способами мы это сможем сделать?

Подойдём к вопросу технически: возьмем и начнём расставлять. На первое место мы можем поставить любую из пяти книг, то есть вариантов заполнить первое место на полке --- пять штук. Когда первое место заполнено, то вариантов заполнить второе место остаётся четыре. Всего возможных вариантов заполнения первых двух мест получается $5 \times 4$.

Заполняем далее: на третье место претендуют три оставшиеся книги, то есть вариантов, которыми мы можем расставить три книги --- $5 \times 4 \times 3$.

Следуя далее этой логике мы получим, что всего возможных вариантов расставить все пять книг на полке будет

$$
5 \times 4 \times 3 \times 2 \times 1 = 5!
$$

Мы получили формулу **числа перестановок** из $n$ элементов:

$$
P_n = n!
$$


То есть любые $n$ объектов можно расставить на $n$ мест $n!$ способами.

#### Размещения

##### Без повторений

Теперь представим, что у нас очень маленькая полка, и на ней умещается всего три книги. Сколькими способами мы можем заполнить такую полку, если всего в нашем распоряжении пять книг?

Всего перестановок из пяти книг $5!$, однако в силу того, что на полку умещаются только три первые книги из каждой перестановки, отличных друг от друга вариантов теперь будет меньше. Во сколько раз? В число раз, равно количеству перестановок из тех книг, которые на полку не помещаются. В нашем случае --- $(5 - 3)!$. 

То есть мы можем заполнить нашу полку $\dfrac{5!}{(5-3)!}$ способами.

Мы получили формулу для подсчета **числа размещений (без повторений)** из $n$ элементов по $k$ местам:

$$
A_n^k = \frac{n!}{(n-k)!}
$$


##### С повторениями

Каждой книги у нас по одному экземпляру, поэтому выше мы говорили о размещениях без повторений. Для полноты картины посмотрим на размещения с повторениями, хотя они встречаются в практике реже.

Теперь у нас неограниченное количество копий каждой из книг, поэтому при размещении трех из пяти книг на полке все три могут оказаться одной и той же, или две одинаковые, а одна отличается и т.д. Суть --- книги могут повторяться.

Поскольку теперь, независимо от того, сколько книг мы уже поставили, у нас все равно осталось столько же, то есть 5, так как есть копии, каждый раз мы будем выбирать из пяти книг. Таких выборов нам нужно будет сделать три, так как три места на полке. Итого, заполнить нашу полку мы сможем $5^3$ способами.

Мы получили формулу для подсчета **числа размещений с повторениями** из $n$ элементов по $k$ местам:

$$
\overline{A_n^k} = n^k
$$


#### Сочетания


##### Без повторений

А теперь задача такова: нам не важно в каком порядке будут стоять книги на полке --- нам нужно просто поставить три какие-то книги. Сколько возможно вариантов выбрать три книги из пяти?

Так как мы теперь не учитываем порядок книг, то возможных вариантов будет в $3!$ раз меньше, чем число размещений. Почему? Так как все перестановки этих трёх книг для нас теперь идентичны. Итого, всего вариантов выбрать три книги из пяти $\dfrac{5!}{3!(5-3)!}$.

Мы получили формулу для подсчета **числа сочетаний** из $n$ элементов по $k$:

$$
С_n^k = \frac{n!}{k!(n-k)!}
$$

Последняя формула нам пригодится далее при обсуждении схемы испытаний Бернулли.


##### С повторениями

Вновь для полноты картины посмотрим на случай с повторениями. У нас вновь есть неограниченное количество копий каждой книги, однако порядок выставления на полку нам не важен --- как и было в сочетаниях. Количество сочетаний в этом случае будет равно

$$
\overline{С_n^k} = \frac{(n+k-1)!}{k!(n-1)!}
$$


## Элементы математического анализа

Из всего матана нам надо уловить два основных концепта — производную и интеграл. Этим и займёмся, захватив попутно немного пределов.

### Последовательности

**Числовая последовательность** --- это последовательность чисел [внезапно]. В общем случае --- любых. Она обозначается $(x_n)^\infty_{n=1}$, где $x_n$ --- это некоторый элемент последовательности, а верхний и нижний индексы обозначают границы изменения индекса $n$. Например, $\langle 1,-1,1,-1,\dots \rangle$ --- это числовая последовательность, которую можно обозначить $\big( (-1)^n \big)^\infty_{n=1}$.

Последовательность возникает на некотором множестве чисел. Если на таком множестве определено отношение порядка, то есть элементы этого множества можно сравнивать на «больше-меньше-равно», то можно сформировать монотонную последовательность. Это такая последовательность, которая *не возрастает* --- то есть стоит на месте или убывает --- или *не убывает* --- то есть стоит на месте или возрастает. Более того, если существует такой объект (число), к которому элементы последовательности приближаются с ростом номера, то он является...

### Предел последовательности

...пределом этой последовательности.

Разберемся на примере. Пусть у нас есть вот такая простенькая последовательность:

$$
\Big( \frac{1}{n} \Big)^{\infty}_{n=1} = \Big \langle 1, \frac{1}{2}, \frac{1}{3}, \dots \Big \rangle
$$
 

Достаточно очевидно, что каждый следующий её элемент, меньше предыдущего. Отрицательными элементы данной последовательности быть не могут, поэтому кажется, что всё идет к тому, что где-то там последовательность упрётся в ноль.

Формально число $a$ называется **пределом последовательности** $\{x_n\}$, если для любого положительного числа $\varepsilon$ существует номер $N_\varepsilon$, такой что для любого $n > N_\varepsilon$, выполняется неравенство $|x_n - a| < \varepsilon$, или на математическом:

$$
\lim_{n \rightarrow \infty} x_n = a \Leftrightarrow \forall \varepsilon > 0 \exists N_\varepsilon \in \setN: n \geq N_\varepsilon, |x_n - a| < \varepsilon
$$


То есть, в случае нашей последовательности мы можем отступить на сколь угодно малое число $\varepsilon$ от нуля, и, начиная с какого-то номера, все элементы нашей последовательности окажутся в интервале $(\varepsilon, 0)$. Поэтому $\lim_{n \rightarrow 0} \frac{1}{n} = 0$.


### Функции

**Функции** (они же отображения, как мы выяснили выше) устанавливают соответствие между элементами двух множеств. Чаще всего мы имеет дело с числовыми функциями, то есть такими, которые ставят одни числа в соответствие другим. У любой функции есть *область определения* (множество $X$) и *область значений* (множество $Y$). Сама же функция представляет собой множество упорядоченных пар

$$
(x,y) \in X \times Y,
$$
таких что 

(1) пары существуют для всех элементов $X$, и 
(2) если первые элементы пар равны, то равны и их вторые элементы.

Примерами функций могут быть $y = x^2$, $y = kx + b$, $y = |x|$ и другие.

```{r pkgs}
library(tidyverse)
theme_set(theme_bw())
library(latex2exp)
library(plotly)
```

```{r func-graphs}
#| label: func_graphs
#| fig-cap: "Примеры функций"
 
ggplot() +
  geom_function(fun = function(x) x^2) +
  geom_function(fun = function(x) abs(x), color = "royalblue4") +
  geom_function(fun = function(x) 2 * x + 4, color = "indianred4") +
  annotate(geom = "text", label = latex2exp("$y = x^2$"),
           x = 4, y = 20) +
  annotate(geom = "text", label = "y = |x|",
           x = 4, y = 6, color = "royalblue4") +
  annotate(geom = "text", label = "y = 2x + 4",
           x = 2.5, y = 11, color = "indianred4") +
  xlim(-5, 5) +
  labs(x = "x", y = "f(x)")
```


#### Дискретные и непрерывные функции

В зависимости от того, какова область определения функции, то есть множество $X$, функции могут быть *дискретными* и *непрерывными*. Например, если функция определена на множестве целых чисел $\setZ$, то она будет дискретная, так как между, например, $1$ и $2$ будет пусто.

```{r discrete-func}
#| label: func-graphs
#| fig-cap: "Пример графика дискретной функции"

tibble(x = 0:20,
       y = dbinom(x, 25, .5)) %>% 
  ggplot(aes(x, y)) +
  geom_point() +
  labs(y = "f(x)")
```

Если функция определена на множестве $\setR$, то она будет непрерывной. Например, функция $f(x) = x^2$ является непрерывной, как и функции $f(x) = \sqrt{x}$ и $f(x) = \ln(x)$. Если функция непрерывная, то она дифференцируема[^4].

[^4]: Это не вполне правда. Непрерывность является *необходимым*, но недостаточным условием для дифференцируемости.



### Производная

А раз они дифференцируемы, то мы можем взять производную!

Производная --- очень полезная вещь. Во-первых, она показывает **тангенс угла наклона касательной в данной точке**, а во-вторых **скорость и направление изменения функции в данной точке**. На самом деле, и первое, и второе рассказывает нам примерно об одном и том же.

Давайте издалека. Как нам узнать, куда двигается функция в данной точке?

Пусть дана функция $f(x) = 2x^3 + 3x^2-4x+6$.


```{r deriv1}
ggplot() +
  geom_function(fun = function(x) 2*x^3+3*x^2-4*x+6) +
  xlim(-3, 5) +
  labs(x = "x",
       y = "f(x)")
```

Выберем точку $x_0$, в которой мы хотим определить, куда и с какой скоростью движется наша функция. В этой точке функция имеет значение $y_0$:

```{r deriv2}
ggplot() +
  geom_function(fun = function(x) 2*x^3+3*x^2-4*x+6) +
  geom_vline(xintercept = 2, linetype = "dashed") +
  annotate(geom = "text", label = latex2exp("$x_0$"),
           x = 2.2, y = 0) +
  geom_hline(yintercept = 26, linetype = "dashed") +
  annotate(geom = "text", label = latex2exp("$y_0$"),
           x = 0, y = 35) +
  xlim(-3, 5) +
  labs(x = "x",
       y = "f(x)")
```

Шагнём на некоторую дистанцию $\Delta x$ вправо (по направлению оси $x$). Назовём эту дистанцию *приращением аргумента*. В точке $x_0 + \Delta x$ фунция будет иметь какое-то значение $y_0 + \Delta y$, где $\Delta y$ --- *приращение функции*.

```{r deriv3}
ggplot() +
  geom_function(fun = function(x) 2*x^3+3*x^2-4*x+6) +
  geom_vline(xintercept = 2, linetype = "dashed") +
  annotate(geom = "text", label = latex2exp("$x_0$"),
           x = 2.2, y = 0) +
  geom_vline(xintercept = 3, linetype = "dashed") +
  annotate(geom = "text", label = latex2exp("$x_0 + \\Delta x$"),
           x = 3.5, y = 0) +
  geom_hline(yintercept = 26, linetype = "dashed") +
  annotate(geom = "text", label = latex2exp("$y_0$"),
           x = 0, y = 35) +
  geom_hline(yintercept = 75, linetype = "dashed") +
  annotate(geom = "text", label = latex2exp("$y_0 + \\Delta y$"),
           x = 0, y = 90) +
  xlim(-3, 5) +
  labs(x = "x",
       y = "f(x)")
```

Наша функция движется из точки $(x_0,y_0)$ в точку $(x_0 + \Delta x, y_0 + \Delta y)$. Имеем следующий треугольник --- приблизим картинку:

```{r deriv4}
ggplot() +
  geom_function(fun = function(x) 2*x^3+3*x^2-4*x+6) +
  geom_vline(xintercept = 2, linetype = "dashed") +
  annotate(geom = "text", label = latex2exp("$x_0$"),
           x = 2.2, y = 0) +
  geom_vline(xintercept = 3, linetype = "dashed") +
  annotate(geom = "text", label = latex2exp("$x_0 + \\Delta x$"),
           x = 3.5, y = 0) +
  geom_hline(yintercept = 26, linetype = "dashed") +
  annotate(geom = "text", label = latex2exp("$y_0$"),
           x = 1, y = 35) +
  geom_hline(yintercept = 75, linetype = "dashed") +
  annotate(geom = "text", label = latex2exp("$y_0 + \\Delta y$"),
           x = 1, y = 90) +
  geom_line(aes(x = c(2, 3, 3, 2),
                y = c(26, 75, 26, 26)),
            size = 1, color = "indianred4") +
  geom_line(aes(x = c(3, 3),
                y = c(75, 26)),
            size = 1, color = "indianred4") +
  geom_line(aes(x = c(2, 3),
                y = c(26, 26)),
            size = 1, color = "indianred4") +
  annotate(geom = "text", label = latex2exp("$\\Delta x$"), 
           x = 2.5, y = 18, color = "indianred4") +
  annotate(geom = "text", label = latex2exp("$\\Delta y$"), 
           x = 3.2, y = 50, color = "indianred4") +
  annotate(geom = "text", label = latex2exp("$\\alpha$"), 
           x = 2.2, y = 30, color = "indianred4", size = 5) +
  xlim(0, 4) +
  labs(x = "x",
       y = "f(x)")
```

Нас интересует угол $\alpha$ --- именно он задает скорость и направление изменения функции. Если мы узнаем, каков угол $\alpha$ --- а точнее $\tan \alpha$, потому что так проще --- то узнаем, куда движется функция.

$$
\tan \alpha = \frac{\Delta y}{\Delta x}
$$

Ну, хорошо. Но мы шагали достаточно далеко от точки, которая нас интесует. Если мы будем постепенно уменьшать шаг, то получим последовательность

$$
\langle \tan \alpha_1, \tan \alpha_2, \tan \alpha_3, ... \rangle
$$

У этой последовательности есть предел, и если мы его рассчитаем, то как раз и получим значение производной в данной точке.

$$
f'(x_0) = \lim_{\Delta x \rightarrow 0} \frac{\Delta f(x)}{\Delta x} = \frac{df}{dx}(x_0)
$$


Очень маленькое приращение обозначается $dx$ (или $df$ , если это приращение функции). Вот мы и получили производную.

Можно построить график производной. Это тоже будет функция.

Важное свойство этой функции, которое нам понадобится в дальнейшем, заключается в том, что там, где график производной пересекает ось $x$ --- то есть *там, где производная равна нулю* --- на исходной функции случаются точки смены монотонности --- *точки минимума* и *максимума*.

```{r deriv-graph}
ggplot() +
  geom_function(fun = function(x) 2*x^3+3*x^2-4*x+6) +
  geom_function(fun = function(x) 6*x^2+6*x-4, color = "indianred4") +
  geom_vline(xintercept = -1.5, linetype = "dashed", color = "gray50") +
  geom_vline(xintercept = 0.5, linetype = "dashed", color = "gray50") +
  xlim(-3, 5) +
  labs(x = "x",
       y = "f(x)")
```


### Частная производная

Мы хорошо знакомы с функциями одной переменной, где некий $y$ зависит от некоего $x$ и более ни от чего не зависит. Однако в общем случае никто нам не может помешать задать следующую функцию:

$$
f(x, y) = 2x^2 + y^3
$$

Теперь у нас две переменные --- $x$ и $y$ --- и от них обеих зависит значение функции. Это даже можно изобразить:

```{r 2d-graph}
fun3 <- function(x, y) { z <- cbind(x, y); 2*z[,1]^2 + z[,2]^3}
x = seq(-3, 3, by = .1)
y = seq(-3, 3, by = .1)
z = outer(x, y, fun3)
plot_ly(x = x, y = y, z = z) %>% add_surface()
```

В общем-то наличие второй переменной практически ничего не меняет, однако появляется важная фича --- мы можем смотреть, как изменяется значение функции при изменении каждой переменной в отдельности. Это позволяют делать **частные производные**.

Частные производные в целом берутся так же, как и обычные, только мы предполагаем, что все другие переменные --- то есть те, по которым мы не берём производную в данный момент --- это *константы*. Таким образом, мы как бы фиксируем другие переменные и получаем скорость изменения функции по какой-либо одной переменной.

Рассмотрим на примере нашей функции $f(x, y) = 2x^2 + y^3$. Пусть мы хотим взять производную по $x$. Тогда мы предполагаем следующее:

$$
y = \const \Rightarrow y^3 = \const = c
$$

Функция примет следующий вид:

$$
f(x, y) = 2x^2 + c,
$$

а производная по $x$ будет вычисляться следующим образом:

$$
\frac{\partial f(x, y)}{\partial x} = (2x^2 + c)' = (2x^2)' = 4x
$$

$\frac{\partial f(x, y)}{\partial x}$ --- это обозначение частной производной, аналогично тому, как мы обозначали производную через $\frac{dy}{dx}$.

Аналогично можно найти частную производную по $y$:

$$
x = \const \Rightarrow 2x^2 = \const = c
$$

$$
\frac{\partial f(x, y)}{\partial y} = (c + y^3)' = (y^3)' = 3x^2
$$

Знакомство с вычислением частной производной понадобится нам, чтобы понять, как внутри устроена линейная регрессия и ухватить идею градиентного спуска.


### Интеграл

Интеграл --- штука мощная, но нам он понадобится только с одной стороны. Нам надо будет искать площадь под кривой. Этим и займемся.

Пусть у нас есть функция $y = \sqrt{x}$. Нам надо найти площадь под её графиком на отрезке от $0$ до $3$.

```{r}
ggplot() +
  xlim(0, 5) +
  ylim(0, 5) +
  geom_function(fun = function(x) sqrt(x)) +
  geom_vline(xintercept = c(0, 3), linetype = "dashed")
```

Мы можем разбить этот отрезок на части размером $\Delta x$, а саму площадь на соответствующие прямоугольники. Это нам позволит оценить площадь. На рисунке ниже $\Delta x = 0.25$.

```{r integral-plot}
tibble(xmin = seq(0, 3, by = .25)[-13],
       xmax = seq(0, 3, by = .25)[-1],
       ymin = 0,
       ymax = sqrt(xmax)) -> ds_rect
ggplot() +
  xlim(0, 5) +
  ylim(0, 5) +
  geom_function(fun = function(x) sqrt(x)) +
  geom_vline(xintercept = c(0, 3), linetype = "dashed") +
  geom_rect(data = ds_rect,
            aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
            fill = "royalblue", color = "royalblue", alpha = .3)
```

Получается, площадь можно оценить, сложив площади всех прямоугольников:

$$
S \approx \sum_{i=1}^n y_i \Delta x
$$

Ясно, что чем у́же прямоугольники у нас будут, тем точнее мы будем знать площадь. Ниже представлены рисунки для случая $\Delta x = 0.1$ и $\Delta x = 0.05$.

```{r integral-plot01}
tibble(xmin = seq(0, 3, by = .1)[-31],
       xmax = seq(0, 3, by = .1)[-1],
       ymin = 0,
       ymax = sqrt(xmax)) -> ds_rect
ggplot() +
  xlim(0, 5) +
  ylim(0, 5) +
  geom_function(fun = function(x) sqrt(x)) +
  geom_vline(xintercept = c(0, 3), linetype = "dashed") +
  geom_rect(data = ds_rect,
            aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
            fill = "royalblue", color = "royalblue", alpha = .3)
```

```{r integral-plot005}
tibble(xmin = seq(0, 3, by = .05)[-61],
       xmax = seq(0, 3, by = .05)[-1],
       ymin = 0,
       ymax = sqrt(xmax)) -> ds_rect
ggplot() +
  xlim(0, 5) +
  ylim(0, 5) +
  geom_function(fun = function(x) sqrt(x)) +
  geom_vline(xintercept = c(0, 3), linetype = "dashed") +
  geom_rect(data = ds_rect,
            aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
            fill = "royalblue", color = "royalblue", alpha = .3)
```

Чтобы вычислить площадь точно, снова воспользуемся пределами, и определим с их помощью **определенный интеграл**:

$$
\lim_{\Delta x \rightarrow 0} \sum_{i = 1}^n y_i \Delta x = \int_a^b \sqrt{x}\,dx
$$

Определенный он потому, что мы знаем, площадь в каких границах нас интересует. Определённый интеграл --- это число.

$$
\int_0^3 \sqrt{x} \, dx \approx 3.46
$$


А раз есть определённый интеграл, значит есть и неопределённый. Рассмотрим следующую визуализацию:

<center>
<figure>
<img src="pics/antideriv.gif">
<figcaption>Построение неопределенного интеграла</figcaption>
</figure>
</center>

Мы смотрим, как изменяется площадь под графиком некоторой функции $f(x)$ по мере нашего движения по оси $x$ (нижний график), и строим график, по оси $y$ которого расположена площадь под исходным графиком, левее данного $x$. Этот график и отображает неопределенный интеграл, второе название которого первообразная. **Неопределённый интеграл (первообразная)** --- это такая функция $F(x)$, производная которой $F'(x)$ равняется $f(x)$, то есть исходной функции. Таким образом, справедливо равенство

$$
F'(x) = f(x)
$$

А также справедливо соответствие между определённым и неопредленным интегралом:

$$
\int_a^b f(x) dx = F(b) - F(a)
$$





## Элементы линейной алгебры

> «Увы, невозможно объяснить, что такое матрица. Ты должен увидеть это сам.»<br>
Морфеус (Матрица, 1999)

### Системы линейных уравнений

Линейная алгебра занимается решением систем линейных уравнений. Да в общем-то и все. В самом общем виде система линейных уравнений выглядит так:

$$
\cases{
a_{11}x_1 + a_{12}x_2 + \cdots + a_{1m}x_m = b_1 \\
a_{21}x_1 + a_{22}x_2 + \cdots + a_{2m}x_m = b_2 \\
\cdots \\
a_{n1}x_1 + a_{n2}x_2 + \cdots + a_{nm}x_m = b_n \\
}
$$

В данном случае это система из $n$ уравнений с $m$ неизвесными. Хотя такая запись математически предельно верна, выглядит она достаточно громоздко, и ею весьма трудно пользоваться. Поэтому обычно системы линейных уравнений записывают в *матричном виде*:

$$
\vm{A}\vm{x} = \vm{b}
$$

Согласитесь, читать такое значительно проще. Здесь $\vm{A}$ --- это матрица коэффициентов системы, $\vm{x}$ --- вектор неизвестных, а $\vm{b}$ --- вектор свободных членов системы. Внутри они устроены вот так:

$$
\vm{A} = \pmatrix{
a_{11} & a_{12} & \cdots & a_{1m} \\
a_{21} & a_{22} & \cdots & a_{2m} \\
\vdots & \vdots & \ddots & \vdots \\
a_{n1} & a_{n2} & \cdots & a_{nm}
}
\quad
\vm{x} = \pmatrix{x_1 \\ x_2 \\ \vdots \\ x_m}
\quad
\vm{b} = \pmatrix{b_1 \\ b_2 \\ \vdots \\ b_n}
$$

Разберемся с этими структурами подробнее.


### Векторы

Как мы уже знаем, **вектор** --- это набор чисел. В зависимости от того, как он расположен, он может быть *вектором-строкой* ($\vm{r}$) или *вектором-столбцом* ($\vm{c}$):

$$
\vm{r} = \pmatrix{r_1 & r_2 & r_3 & \dots & r_n}
$$
$$
\vm{c} = \pmatrix{c_1 \\ c_2 \\ c_3 \\ \vdots \\ c_m}
$$

Геометрически элементы вектора (числа) являются его координатами в некотором $n$-мерном пространстве. О переходе от вектора как направленного отрезка к вектору как набору чисел мы говорили в [первой лекции](#l1).

Посмотрим, что можно делать с векторами на примере векторов $\vm{v}$ и $\vm{w}$, в которых есть по $n$ элементов.


$$
\vm{v} = \pmatrix{v_1 & v_2 & v_3 & \dots & v_n}
$$

$$
\vm{w} = \pmatrix{w_1 & w_2 & w_3 & \dots & w_n}
$$


#### Сложение векторов

Векторы одинакоых размерностей можно складывать друг с другом:


$$
\vm{v} + \vm{w} = \pmatrix{v_1 + w_1 & v_2 + w_2 & v_3 + w_3 & \dots & v_n + w_n}
$$

#### Умножение вектора на число

Вектор можно умножать на произвольное вещественное число:

$$
\alpha \cdot \vm{v} = \pmatrix{\alpha \cdot v_1 & \alpha \cdot v_2 & \alpha \cdot v_3 & \dots & \alpha \cdot v_n}, \quad \forall \alpha \in \setR
$$


#### Скалярное произведение векторов

Векторы одинаковых размерностей можно скалярно умножить друг с другом. **Скалярное произведение векторов** определено как сумма произведений их соответствующих координат:

$$
\vm{v} \cdot \vm{w} = v_1 w_1 + v_2 w_2 + v_3 w_3 + \dots + v_n w_n
$$

Таким образом, в результате скалярного произведения векторов получается *одно число*.


### Матрицы

Как мы уже знаем, **матрица** --- это двумерный массив чисел. Своего рода табличка. Соответственно, в матрице есть строки и столбцы. Это значит, что одну и ту же матрицу можно записать по-разному. Например, матрицу $\vm{A}$, с которой мы встречались выше, можно записать:

(1) указав все элементы:

$$
\vm{A} = \pmatrix{
a_{11} & a_{12} & \cdots & a_{1m} \\
a_{21} & a_{22} & \cdots & a_{2m} \\
\vdots & \vdots & \ddots & \vdots \\
a_{n1} & a_{n2} & \cdots & a_{nm}
}
$$

(2) задав её через векторы-столбцы:

$$
\vm{A} = \pmatrix{
\vm{a_1} & \vm{a_2} & \cdots & \vm{a_m} \\
}
$$

(3) задав её через векторы-строки:

$$
\vm{A} = \pmatrix{
\vm{a_1} \\ \vm{a_2} \\ \cdots \\ \vm{a_n}
}
$$

Все три способа записи обозначают один и тот же объект и используются в зависимости от того, какой способ рассмотрения матрицы в данный момент удобнее.

Матрица характеризуется, прежде всего, размером. В размере сначала указывается количество строк, затем --- количество столбцов. Рассматриваемая нами матрица $\vm{A}$ имеет размер $n \times m$, что можно записать как $\vm{A}_{n \times m}$.

* Если количество строк и столбцов в матрице совпадает, она называется *квадратной*.
* В матрице есть **главная диагональ** --- слева сверху вправо вниз --- и **побочная диагональ** --- справа сверху влево вниз.
* Квадратная матрица, все элементы которой, кроме стоящих на главной диагонали, равны нулю, называется *диагональной матрицей*.
* Есть две замечательные матрицы: единичная $\vm{I}$ (или $\vm{E}$) и нулевая $\vm{O}$.

$$
\vm{I} = \vm{E} = \pmatrix{
1 & 0 & \dots & 0 \\
0 & 1 & \dots & 0 \\
\vdots & \vdots & \ddots & \vdots \\
0 & 0 & \dots & 1 \\
} 
\quad
\vm{O} = \pmatrix{
0 & 0 & \dots & 0 \\
0 & 0 & \dots & 0 \\
\vdots & \vdots & \ddots & \vdots \\
0 & 0 & \dots & 0 \\
}
$$

#### Сложение матриц

Две матрицы *одинакового размера* можно складывать друг с другом:

$$
\vm{A}_{n \times m} + \vm{B}_{n \times m} = \pmatrix {
a_{11} + b_{11} & a_{12} + b_{12} & \dots & a_{1m} + b_{1m} \\
a_{21} + b_{21} & a_{22} + b_{22} & \dots & a_{2m} + b_{2m} \\
\vdots & \vdots & \ddots & \vdots \\
a_{n1} + b_{n1} & a_{n2} + b_{n2} & \dots & a_{nm} + b_{nm} \\
}
$$

**Свойства сложения матриц:**

1. Коммутативность: $\vm{A} + \vm{B} = \vm{B} + \vm{A}$
1. Ассоциативность: $(\vm{A} + \vm{B}) + \vm{C} = \vm{A} + (\vm{B} + \vm{C})$
1. Существование нулевого элемента: $\vm{A} + \vm{O} = \vm{A}$
1. Существование противоположного элемента: $\vm{A} + (-\vm{A}) = \vm{O}$

#### Умножение матрицы на число

Любую матрицу можно умножить на вещественное число:

$$
\alpha \cdot \vm{A} = \pmatrix{
\alpha \cdot a_{11} & \alpha \cdot a_{12} & \alpha \cdot \cdots & a_{1m} \\
\alpha \cdot a_{21} & \alpha \cdot a_{22} & \cdots & \alpha \cdot a_{2m} \\
\vdots & \vdots & \ddots & \vdots \\
\alpha \cdot a_{n1} & \alpha \cdot a_{n2} & \cdots & \alpha \cdot a_{nm}
} \quad \forall \alpha \in \setR
$$


#### Матричное умножение

Штош, приступим.

* Матрицы можно матрично перемножить друг с другом, если у них **совпадают внутренние размерности**.
* Результатом перемножения $\vm{A}_{n \times k} \times \vm{B}_{k \times m}$ является матрица $\vm{C}_{n \times m}$.
* Элемент $c_{ij}$ матрицы $\vm{C}$ равен скалярному произведению $i$-го вектора-строки матрицы $\vm{A}$ и $j$-го вектора-столбца матрицы $\vm{B}$.

Визуально:

<center>
<figure>
<img src="pics/matrix-prod.png">
<figcaption>Принцип матричного умножения</figcaption>
</figure>
</center>

Теперь попробуем это расписать. Пусть есть две матрицы $\vm{A}_{n \times k} \times \vm{B}_{k \times m}$, которые выглядят следующим образом:

$$
\vm{A} = 
\pmatrix{\vm{a}_1 \\ \vm{a}_2 \\ \vdots \\ \vm{a}_n} = 
\pmatrix{
a_{11} & a_{12} & \dots & a_{1k} \\
a_{21} & a_{22} & \dots & a_{2k} \\
\vdots & \vdots & \ddots & \vdots \\
a_{n1} & a_{n2} & \dots & a_{nk}
}
$$

$$
\vm{B} = 
\pmatrix{\vm{b}_1 & \vm{b}_2 & \dots & \vm{b}_n} = 
\pmatrix{
b_{11} & b_{12} & \dots & b_{1m} \\
b_{21} & b_{22} & \dots & b_{2m} \\
\vdots & \vdots & \ddots & \vdots \\
b_{k1} & b_{k2} & \dots & b_{km}
}
$$

$$
\vm{A} \times \vm{B} = \pmatrix{
\vm{a}_1 \cdot \vm{b}_1 & \vm{a}_1 \cdot \vm{b}_2 & \dots & \vm{a}_1 \cdot \vm{b}_m \\
\vm{a}_2 \cdot \vm{b}_1 & \vm{a}_2 \cdot \vm{b}_2 & \dots & \vm{a}_2 \cdot \vm{b}_m \\
\vdots & \vdots & \ddots & \vdots \\
\vm{a}_n \cdot \vm{b}_1 & \vm{a}_n \cdot \vm{b}_2 & \dots & \vm{a}_n \cdot \vm{b}_m \\
} =
$$

$$
= \pmatrix{
(a_{11}b_{11} + a_{12}b_{21} + \dots + a_{1k}b_{k1}) & (a_{11}b_{12} + a_{12}b_{22} + \dots + a_{1k}b_{k2}) & \dots & (a_{11}b_{1m} + a_{12}b_{2m} + \dots + a_{1k}b_{km}) \\
(a_{21}b_{11} + a_{22}b_{21} + \dots + a_{2k}b_{k1}) & (a_{21}b_{12} + a_{12}b_{22} + \dots + a_{2k}b_{k2}) & \dots & (a_{21}b_{1m} + a_{22}b_{2m} + \dots + a_{2k}b_{km}) \\
\vdots & \vdots & \ddots & \vdots \\
(a_{n1}b_{11} + a_{n2}b_{21} + \dots + a_{nk}b_{k1}) & (a_{n1}b_{12} + a_{n2}b_{22} + \dots + a_{nk}b_{k2}) & \dots & (a_{n1}b_{1m} + a_{n2}b_{2m} + \dots + a_{nk}b_{km}) \\
} =
$$

$$
= \pmatrix{
c_{11} & c_{12} & \dots & c_{1m} \\
c_{21} & c_{22} & \dots & c_{2m} \\
\vdots & \vdots & \ddots & \vdots \\
c_{n1} & c_{n2} & \dots & c_{nm}
} = \vm{C}
$$

$$
c_{ij} = \sum_{t=1}^k a_{it}b_{tj}
$$

**Свойства матричного умножения:**

1. Ассоциативность: $\vm{A}(\vm{B}\vm{C}) = (\vm{A}\vm{B})\vm{C}$ и $\alpha(\vm{A}\vm{B}) = (\alpha\vm{A})\vm{B} = \vm{A}(\alpha\vm{B})$
1. Дистрибутивность: $\vm{A}(\vm{B} + \vm{C}) = \vm{A}\vm{B} + \vm{B}\vm{C}$ и $(\vm{A} + \vm{B})\vm{C} = \vm{A}\vm{C} + \vm{B}\vm{C}$
1. Отсутствие коммутативности: в общем случае $\vm{A}\vm{B} \neq \vm{B}\vm{A}$
1. Умножение на единичный элемент: $\vm{I}\vm{A} = \vm{A}$, $\vm{A}\vm{I} = \vm{A}$
1. Умножение на нулевой элемент: $\vm{O}\vm{A} = \vm{O}$, $\vm{A}\vm{O} = \vm{O}$
1. Умножение на обратный элемент --- выполняется только для некоторых квадратных матриц (см. [ниже](#l3_det)): $\vm{A}\vm{A}^{-1} = \vm{A}^{-1}\vm{A} = \vm{I}$


#### Транспонирование матрицы

Это очень простая операция --- строки и столбы матрицы меняются местами:

$$
\vm{A} = 
\pmatrix{\vm{a}_1 & \vm{a}_2 & \dots & \vm{a}_n} = 
\pmatrix{
a_{11} & a_{12} & \dots & a_{1k} \\
a_{21} & a_{22} & \dots & a_{2k} \\
\vdots & \vdots & \ddots & \vdots \\
a_{n1} & a_{n2} & \dots & a_{nk}
}
$$

$$
\vm{A}^T = 
\pmatrix{\vm{a}_1 \\ \vm{a}_2 \\ \vdots \\ \vm{a}_n} = 
\pmatrix{
a_{11} & a_{21} & \dots & a_{n1} \\
a_{12} & a_{22} & \dots & a_{n2} \\
\vdots & \vdots & \ddots & \vdots \\
a_{1k} & a_{2k} & \dots & a_{nk}
}
$$

Если размер исходной матрицы был $n \times k$, то размер транспонированной матрицы будет $k \times n$.



#### Определитель и обратная матрица {#l3_det}

**Определитель (детерминант) матрицы** $\det \vm{A}$, $|\vm{A}|$, $\Delta \vm{A}$ --- это величина, которая может быть вычислена и поставлена в соответствие квадратной матрице. Он «определяет» свойства матрицы, в том числе одно из ключевых --- её **обратимость**.

Вычисление детерминанта матрицы в общем случае является достаточно сложной задачей и требует введения дополнительных определений, поэтому ограничимся интерпретацией его значений:

* Если матрица *не является квадратной*, то детерминант *не определен*.
* Если детерминант матрицы *не равен нулю*, то:
    * система линейных уравнений, задаваемая данной матрицей имеет единственное решение
    * для данной матрицы существует обратная матрица, обладающая следующим свойством --- $\vm{A}\vm{A}^{-1} = \vm{I}$.
* Если детерминант матрицы *равен нулю*, то система линейных уравнений имеет несколько решений.
    * Одной из причин может быть линейная зависимость между столбцами или строками матрицы --- то есть ситуация, при который один из столбцов (одна из строк) линейно выражается через другой (другую).



#### След матрицы

**След матрицы** --- это сумма элементов главной диагонали (квадратной) матрицы.

$$
\text{tr}(\vm{A}) = \sum_i a_{ii}
$$
