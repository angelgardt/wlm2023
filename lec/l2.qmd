# L2 // Предобработка данных. Дата и время. Визуализация данных

## Форматы файлов данных

### CSV

* Текстовый формат
* Значения разделены запятыми (**C**omma-**S**eparated **V**alues)
    * Но это не точно

Прочитать данные этого формата можно функцией

```{r, eval=FALSE}
read.csv()
```

### TSV

* Текстовый формат
* Значения разделены знаком табуляции (`\t`, **T**ab-**S**eparated **V**alues)

Прочитать данные этого формата можно функцией

```{r, eval=FALSE}
read.table()
```

### TXT

* Текстовый формат
* Разделитель может быть любой

Прочитать данные этого формата можно функцией

```{r, eval=FALSE}
read.table()
```

## Табличные форматы

* Файлы Excel --- `.xls`, `.xlsx`

Для их чтения понадобится пакет `readxl`, в котором есть функции

```{r, eval=FALSE}
readxl::read_xls()
readxl::read_xlsx()
```

## Форматы файлов данных c особой разметкой

Встречаются редко и обычно связаны с данными, которые достаются из интернета (парсинг страниц или выгрзуки JavaScript).

### JSON

Выглядят так:

```{JSON}
{
  "first_name": "John",
  "last_name": "Smith",
  "is_alive": true,
  "age": 27,
  "address": {
    "street_address": "21 2nd Street",
    "city": "New York",
    "state": "NY",
    "postal_code": "10021-3100"
  },
  "phone_numbers": [
    {
      "type": "home",
      "number": "212 555-1234"
    },
    {
      "type": "office",
      "number": "646 555-4567"
    }
  ],
  "children": [
    "Catherine",
    "Thomas",
    "Trevor"
  ],
  "spouse": null
}
```

Для работы с ними пригодится пакет `jsonlite`.


### XML

Выглядят так:

```{XML}
<?xml version="1.0"?>
<catalog>
   <book id="bk101">
      <author>Gambardella, Matthew</author>
      <title>XML Developer's Guide</title>
      <genre>Computer</genre>
      <price>44.95</price>
      <publish_date>2000-10-01</publish_date>
      <description>An in-depth look at creating applications 
      with XML.</description>
   </book>
   <book id="bk102">
      <author>Ralls, Kim</author>
      <title>Midnight Rain</title>
      <genre>Fantasy</genre>
      <price>5.95</price>
      <publish_date>2000-12-16</publish_date>
      <description>A former architect battles corporate zombies, 
      an evil sorceress, and her own childhood to become queen 
      of the world.</description>
   </book>
   <book id="bk103">
      <author>Corets, Eva</author>
      <title>Maeve Ascendant</title>
      <genre>Fantasy</genre>
      <price>5.95</price>
      <publish_date>2000-11-17</publish_date>
      <description>After the collapse of a nanotechnology 
      society in England, the young survivors lay the 
      foundation for a new society.</description>
   </book>
</catalog>
```

Для работы с ними пригодится пакет `XML`.



## Организация рабочего пространства

**Рабочая директория** --- папка, в которую по умолчанию смотрит R, когда начинает искать файлы.

Чтобы узнать рабочую директорию, воспользуйтесь функцией

```{r, eval=FALSE}
getwd()
```

Чтобы установить какую-либо папку в качестве рабочей директории, используйте

```{r, eval=FALSE}
setwd("/home/nglgrdt/R")
```


## Путь к файлу

Бывает двух видов:

* абсолютный --- `/home/nglgrdt/R/wlm2023/pr1-course.R`
* относительный --- `wlm2023/pr1-course.R`

Относительный путь вычисляется относительно текущей рабочей директории.

Полезная вещь: `..` --- подняться на один уровень в иерархии папок.


## Projects

* RStudio предоставляет возможность работать в проектах
* Это существенно упрощает организацию файлов, относящихся к одному исследованию
* Внутри проекта можно создавать необходимые папки (для данных, скриптов, результатов анализа, визуализаций и др.)
* При запуске проекта автоматически устанавливается рабочая директория
* Удобно использовать относительные пути к файлам
* Чтобы код воспроизводился на другом компьютере, достаточно заархивировать весь проект и отправить коллеге

### Как создать проект? {#l2-create-project}

1. В правом верхнем углу нажмите на `Project: (None)` и выберите `New Project...`.

<center>
<figure>
<img src="pics/rproject-1.png">
<figcaption>Создание проекта. Шаг 1</figcaption>
</figure>
</center>

2. В открывшемся окне выберите `New Directory`. Это опция создаст новую папку для проекта.

<center>
<figure>
<img src="pics/rproject-2.png">
<figcaption>Создание проекта. Шаг 2</figcaption>
</figure>
</center>

3. Далее выберите `New Project`.

<center>
<figure>
<img src="pics/rproject-3.png">
<figcaption>Создание проекта. Шаг 3</figcaption>
</figure>
</center>

4. В поле `Directory name` укажите, как будет называться папка проекта. В поле `Create project as subdirectory of:` можно выбрать, внутри какой папки будет создана папка проекта. Нажмите `Create Project`.

<center>
<figure>
<img src="pics/rproject-4.png">
<figcaption>Создание проекта. Шаг 4</figcaption>
</figure>
</center>

5. Проект создан и открыт. Теперь в нем можно работать. Чтобы узнать, в каком проекте вы сейчас находитесь, посмотрите в правый верхний угол.

<center>
<figure>
<img src="pics/rproject-5.png">
<figcaption>Создание проекта. Шаг 5</figcaption>
</figure>
</center>



## Кодировка

* Компьютер умеет хранить только числа, а скрипт --- это текст
* Данные также часто содержат текст
* Договорились, что буквенные символы будут храниться на железе компьютера в виде чисел, и составили таблицы соответствий между числами и буквами
* Такие таблицы были названы **кодировками**

* Кодировок много, так как они создавались для разных алфавитов и задач
* Стандартной считается `UTF-8`
* При работе с нестандартными символами (например, диакритические знаки или фонетические символы) пригодится `UTF-16`



## Первичное исследование данных

Прочитаем данные. В данном случае использован относительный путь.

```{r}
lec2 <- read.csv("data/lecture2.csv", encoding = "UTF-8")
```

Выведем первые 6 строк датасета:

```{r}
head(lec2)
```

Выведем последние 3 строки датасета:

```{r}
tail(lec2, n = 3)
```

Посмотрим на структуру датасета:

```{r}
str(lec2)
```

Посмотрим описательные статистики по переменным:

```{r}
summary(lec2)
```

Сделаем частотную таблицу по категориальной переменной:

```{r}
table(lec2$var4)
```

Посмотрим уникальные значений по переменной-индентификатору:

```{r}
unique(lec2$id)
```

Отсортируем количественную переменную по возрастанию:

```{r}
sort(lec2$var5)
```

Проверим, есть ли пропущенные значения --- выполним функцию `is.na()` на каждом столце датасета:

```{r}
apply(lec2, 2, is.na)
```

Упрощенным вариантом функции `apply()` является `sapply()` --- она сразу запускает какую-либо функцию по столбцам датасета. В данном случае использована анонимная функция, которая посчитает количество пропущенных значений в каждом столбце.

```{r}
sapply(lec2, function(x) sum(is.na(x)))
```



## Зачем нам предобрабатывать данные?

* Данные разнообразны в зависимости от того
    * какая у нас исследовательская область
    * какой у нас исследуемый феномен
    * с каким оборудованием мы работаем
    * ...
* Для того, чтобы мы могли работать с любыми данными, независимо от того, откуда они к нам пришли, нам нужно привести их к некому стандартному виду


## Концепция Tidy Data

* В каждом столбце содержится одна переменная
* В каждой строке содержится одно наблюдение
* В каждой ячейке содержится одно значение

<center>
<figure>
<img src="pics/tidy.jpg">
<figcaption>Принципы концепции Tidy Data</figcaption>
</figure>
</center>

## Семейство пакетов `tidyverse`

Установить пакет:

```{r, echo=TRUE, eval=FALSE}
install.packages("tidyverse")
```

Подключить пакет к текущей сессии R:

```{r, echo=TRUE, message=TRUE}
library(tidyverse)
```


## Импорт данных. `tibble`

Функции импорта данных из `tidyverse` атоматически читают данные в `tibble`. С точки зрения пользователя `tibble` --- это тот же самый датафрейм. Есть некоторые отличия в выводе в консоль, с которыми мы ближе познакомимся на практике.

```{r, echo=FALSE}
tibble(id = 1:7,
       var1 = c("Abc", "Def", "Ghi", "Jkl", "Mno", "Pqr", "Stu"),
       var2 = c(5, 16, 94, 28, 11, 100, 96),
       var3 = c(TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE),
       var4 = c("cond1", "cond1", "cond2", "cond2", "cond3", "cond3", "cond1"),
       var5 = c(12.8, 14.2, 32.5, 9.4, 6.3, 11.7, 95.5)) -> ds
# dir.create("data")
ds %>% write_csv("data/lecture2.csv")
```

Для чтения CSV-файлов есть следующие функции:

```{r, eval=FALSE}
read_csv()
read_csv2()
```

Для чтения данных с другими разделителями есть функция

```{r, eval=FALSE}
read_delim()
```

Загрузим данные:

```{r}
ds <- read_csv("data/lecture2.csv")
ds
```

## Pipe

Прежде чем начать разговор о предобработке, познакомимся с одним очень полезным оператором из `tidyverse` --- это пайп.

Существует два вида пайпа:

* маггритеровский `%>%`
    * требуется подключение пакета `tidyverse`
* нативный `|>`
    * находится в базовом R, включается через настройки
        * `Tools > Global Options > Code > Use native pipe operator`

С точки зрения пользователя практически не отличаются друг от друга. И тот, и другой вводится комбинацией `Ctrl + Shift + M`. Выбрать, какой именно будет использоваться, можно в настройках (`Tools > Global Options > Code > Use native pipe operator`.)

<center>
<figure>
<img src="pics/native-pipe.png">
<figcaption>Выбор используемого пайпа в настройках</figcaption>
</figure>
</center>

Пайп передает то, что слева от него, в функцию, которая справа от него, в качестве первого аргумента.

```{r}
sum(1:3)
1:3 %>% sum()
```

```{r}
round(pi, 2)
pi %>% round(2)
```

Позволяет выстраивать цепочки последовательных преобразований:

```{r}
sqrt(abs(log(abs(round(sin(1 / cos(3)), 2)), 3)))
3 %>% cos() %>% 
  `/`(1, .) %>% 
  sin() %>% 
  round(2) %>% 
  abs() %>% 
  log(3) %>% 
  abs() %>% 
  sqrt()
```


## Переименование переменных

```{r}
ds
```

```{r}
ds %>% 
  rename(city = var1,
         age = var2)
```

```{r}
ds %>% 
  set_names(vars(id, city, age, student, condition, score))
```

```{r}
ds %>% 
  set_names(vars(id, city, age, student, condition, score)) %>% 
  rename_all(str_remove, "~")
```


## Фильтрация данных. Строки

```{r}
ds
ds %>% 
  filter(var5 > 10)
ds %>% 
  filter(var3)
ds %>% slice(3:5)
```

## Фильтрация данных. Столбцы

```{r}
ds
ds %>% 
  select(id, var1, var3, var4)
ds %>% 
  select(starts_with("var"))
```

## Сортировка данных

```{r}
ds
ds %>% 
  arrange(var5)
ds %>% 
  arrange(desc(var5))
ds %>% 
  distinct(var4, var3)
```

## Создание и изменение переменных

```{r}
ds
ds %>% 
  mutate(banch = 1)
ds %>% 
  mutate(banch = 1,
         var5_cat = ifelse(var5 > mean(var5), "high", "low"),
         var4 = recode(var4,
                       "cond1" = "easy",
                       "cond2" = "medium",
                       "cond3" = "hard"))
```

## Группировка и агрегация данных

```{r}
ds
ds %>% 
  summarise(v5_mean = mean(var5),
            v2_median = median(var2))
ds %>% 
  group_by(var4) %>% 
  summarise(n = n(),
            v5_mean = mean(var5),
            v2_median = median(var2))
ds %>% 
  summarise(n = n(),
            v5_mean = mean(var5),
            v2_median = median(var2),
            .by = var4)
```

```{r, eval=FALSE}
ungroup()
```


## Объединение датасетов. Строки и столбцы

```{r, echo=FALSE}
ds %>% select(id, var1, var2) %>% filter(id %in% 1:4) -> a
ds %>% select(id, var3, var4) %>% filter(id %in% 1:4) -> b
ds %>% select(id, var1, var2) %>% filter(id %in% 5:7) -> c
```

```{r}
a
b
c

a %>% 
  bind_cols(b)
a %>% 
  bind_rows(c)
```

## Объединение датасетов. Ключ

```{r, echo=FALSE}
ds %>% select(id, var1, var2) %>% filter(id %in% c(1, 2, 5, 7)) -> x
ds %>% select(id, var3 = var4, var4 = var5) %>% filter(id %in% 1:4) -> y
```

<center>
<figure>
<img src="pics/xy.png">
<figcaption>Схема датасетов</figcaption>
</figure>
</center>

<br>

```{r}
x
y
```

## `inner_join()`

<center>
<figure>
<img src="pics/inner-join.png">
<figcaption>Схема inner_join()</figcaption>
</figure>
</center>

<br>

```{r}
x
y
x %>% inner_join(y)
```

## `left_join()`

<center>
<figure>
<img src="pics/left-join.png">
<figcaption>Схема left_join()</figcaption>
</figure>
</center>

<br>

```{r}
x
y
x %>% left_join(y)
```


## `right_join()`

<center>
<figure>
<img src="pics/right-join.png">
<figcaption>Схема right_join()</figcaption>
</figure>
</center>

<br>

```{r}
x
y
x %>% right_join(y)
```

## `full_join()`

<center>
<figure>
<img src="pics/full-join.png">
<figcaption>Схема full_join()</figcaption>
</figure>
</center>

<br>

```{r}
x
y
x %>% full_join(y)
```

## `semi_join()`

<center>
<figure>
<img src="pics/semi-join.png">
<figcaption>Схема semi_join()</figcaption>
</figure>
</center>

<br>

```{r}
x
y
x %>% semi_join(y)
y %>% semi_join(x)
```

## `anti_join()`

<center>
<figure>
<img src="pics/anti-join.png">
<figcaption>Схема anti_join()</figcaption>
</figure>
</center>

<br>

```{r}
x
y
x %>% anti_join(y)
y %>% anti_join(x)
```

## Дублирование ключа

<center>
<figure>
<img src="pics/duplicate-keys.png">
<figcaption>Схема работы .._join() при наличии дублей в колонке ключа</figcaption>
</figure>
</center>

<br>

```{r, echo=FALSE}
x %>% 
  bind_rows(tibble(id = 1, var1 = "Abc", var2 = 7)) %>% 
  arrange(id) -> x
y %>% 
  bind_rows(tibble(id = 2, var3 = "cond2", var4 = 2.0)) %>% 
  arrange(id) -> y
```

```{r}
x
y
x %>% inner_join(y)
x %>% left_join(y)
x %>% right_join(y)
x %>% full_join(y)
```

## Способы объединения по ключу на диаграммах Венна

<center>
<figure>
<img src="pics/joins-venn.png">
<figcaption>Схема работы .._join() на диаграммах Венна</figcaption>
</figure>
</center>


## Широкий и длинный форматы данных

<center>
<figure>
<img src="pics/wide-long.png">
<figcaption>Представление одних и тех же данных в длинном и широком форматах</figcaption>
</figure>
</center>

```{r, echo=FALSE}
ds %>% 
  slice(1:6) %>% 
  mutate(id = rep(1:2, 3)) %>% 
  select(id, var1 = var4, var2 = var5) -> long
```

```{r}
long
long %>% 
  pivot_wider(names_from = var1,
              values_from = var2) -> wide
wide
wide %>% 
  pivot_longer(cols = -id) # names_to, values_to
```



## Строки

Два специализированных пакета:

* `stringr` (является частью `tidyverse`)
* `stringi` (устанавливается отдельно)

```{r}
# install.packages("stringi")
library(stringi)
```


### Как создать строку?

```{r}
s1 <- "сложившаяся структура организации влечет за собой процесс внедрения и модернизации новых предложений"
s1
```

```{r}
s2 <- 'С другой стороны постоянный количественный "рост" и сфера нашей активности позволяет выполнять важные задания по разработке соответствующий условий активизации'
s2
```

```{r, error=TRUE}
s3 <- "С другой стороны постоянный количественный "рост" и сфера нашей активности позволяет выполнять важные задания по разработке соответствующий условий активизации"
s3
```

```{r}
s4 <- "С другой стороны постоянный количественный 'рост' и сфера нашей активности позволяет выполнять важные задания по разработке соответствующий условий активизации"
s4
```

```{r}
s5 <- "С другой стороны постоянный количественный «рост» и сфера нашей активности позволяет выполнять важные задания по разработке соответствующий условий активизации"
s5
```



## Генерация случайных строк

```{r}
stri_rand_strings(n = 10, length = 5)
```



## Операции над строками


### Конкатенация строк

```{r}
paste('first', 'second', 'third')
```

```{r}
paste('first', 'second', 'third', sep = "_")
```

```{r}
paste0('first', 'second', 'third')
```

```{r}
str_c('first', 'second', 'third')
```

```{r}
str_c('first', 'second', 'third', sep = "|")
```

```{r}
stri_c('first', 'second', 'third')
```

```{r}
stri_c('first', 'second', 'third', sep = " & ")
```

```{r, echo=FALSE}
tibble(id = rep(1:10, each = 15),
       scale = c("A", "B", "C") %>% rep(each = 5) %>% rep(10),
       item = 1:5 %>% rep(3) %>% rep(10),
       score = sample(1:5, 150, replace = TRUE)) -> ds_1
```

```{r}
ds_1
ds_1 %>% 
  unite(scale_item, scale, item, sep = "_") -> ds_2
ds_2
```



### Разделение строк

```{r}
str_split("first second third", pattern = " ")
```

```{r}
ds_2 %>% 
  separate(scale_item, into = c("scale", "item"))
```



### Сортировка строк

```{r, echo=FALSE}
set.seed(123)
```

```{r, echo=FALSE}
unsorted_s <- paste0(
  sample(LETTERS, size = length(LETTERS), replace = TRUE),
  sample(letters, size = length(letters)),
  sample(letters, size = length(letters))
) # делаем несортированный вектор из трёхбуквенных «слов»
```

```{r}
unsorted_s
```

```{r}
sort(unsorted_s)
```

```{r}
str_sort(unsorted_s)
```

```{r}
# по умолчанию
str_sort(c("э", "а", "у", "i"), locale = 'en')
```

```{r}
# для русского языка
str_sort(c("э", "а", "у", "i"), locale = 'ru')
```


### Изменение строк


#### Выделение подстроки

```{r}
unsorted_s
str_sub(unsorted_s, start = 1, end = 2)
```


#### Замена подстроки

```{r}
unsorted_s
str_replace(unsorted_s, pattern = "O", replacement = "Ь")
```


#### Удаление подстроки

```{r}
unsorted_s
str_remove(unsorted_s, "S")
```


## Регулярные выражения

```{r}
dates <- c('21.92.2001', '01.04.1994', '5-3-2011', '6/04/1999')
dates
```


### Метасимволы

```{r}
str_view(dates, pattern = ".")
```

```{r}
str_view(dates, pattern = "\\.") # экранирование метасимволов
```

```{r}
str_view(dates, pattern = "^0")
```

```{r}
str_view(dates, pattern = "9$")
```



### Классы знаков

```{r}
str_view(dates, pattern = '\\d') # ищем цифры
```

```{r}
str_view(dates, pattern = '\\D') # ищем не-цифры
```

```{r}
str_view('успешный успех', '\\s') # пробелы
```

```{r}
str_view('успешный успех', '\\S') # не-пробелы
```

```{r}
str_view('верно ведь, что здесь что-то есть', '\\w') # не пробелы и не знаки препинания
```

```{r}
str_view('верно ведь, что здесь что-то есть', '\\W') # пробелы и знаки препинания
```



### Квантификация

* `?` --- ноль или один раз
* `*` --- ноль или более раз
* `+` --- один или более раз
* `{n}` --- n раз

```{r}
str_view(dates, '\\d{2}')
```



## Дата и время

### Почему это особый тип данных?

* Год ≠ 365 дней: високосные года
* Сутки ≠ 24 часа: переход на зимнее и летнее время
* Минута ≠ 60 секунд: компенсация замедления вращения земли (30 июня 23:59:60 или 31 декабря 23:59:60)

Все это автоматически обрабатывает `lubridate`.

```{r}
today()
```

```{r}
now()
```

## Форматы даты и времени

* `yyyy-mm-dd` --- является международным стандартом
    * в таком формате с датой можно работать как со строкой, что оказывается удобно для баз данных
* `dd/mm/yy`, `dd/mm/yyyy`, `dd.mm.yyyy` --- используется в Европе
* `mm/dd/yy`, `mm/dd/yyyy` --- используется в США
* Unix-timestamp (число) --- количество секунд с 01.01.1970, используется в базах данных

## Операции над датами

```{r}
## текущий timestamp
as.numeric(now())
```

```{r}
year(now())
month(now())
day(now())
hour(now())
minute(now())
second(now())
difftime(ymd_hm("2023-01-21, 21:00"), ymd_hm("2023-01-21, 18:10"), units = "mins")
```



## Зачем нужна визуализация?

### Квартет Анскомба

```{r, echo=FALSE, message=FALSE}
theme_set(theme_bw())
quartet <- read_csv("data/anscombe.csv")
```
```{r, echo=FALSE}
str(quartet)
```


```{r, echo=FALSE}
quartet %>% 
  group_by(dataset) %>% 
  summarise(n = n(),
            mean_x = mean(x),
            mean_y = mean(y),
            sd_x = sd(x),
            sd_y = sd(y),
            cor = cor(x, y)) %>% 
  round(2)
```

Но если это нарисовать, получим такое:

```{r, echo=FALSE}
quartet %>% 
  ggplot(aes(x, y)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  facet_wrap(~ dataset)

# ggsave("pics/anscombe.png", width = 1920, height = 1080, units = "px")
```



### Datasaurus

```{r, echo=FALSE, message=FALSE}
datasaurus <- read_csv("data/datasaurus.csv")
```
```{r, echo=FALSE}
str(datasaurus)
```


```{r, echo=FALSE}
datasaurus %>% 
  group_by(dataset) %>% 
  summarise(n = n(),
            mean_x = mean(x),
            mean_y = mean(y),
            sd_x = sd(x),
            sd_y = sd(y),
            cor = cor(x, y)) %>% 
  mutate_if(is.double, round, 1)
```

Однако если это визуализировать, то будет вот что:

```{r, echo=FALSE}
datasaurus %>% 
  ggplot(aes(x, y)) +
  geom_point() +
  facet_wrap(~ dataset)

# ggsave("pics/datasaurus.png", width = 1920, height = 1920, units = "px")
```


## Виды графиков

### Столбчатая диаграмма (Bar plot, Bar graph)

```{r, echo=FALSE, message=FALSE}
diamonds %>% 
  group_by(cut) %>% 
  summarise(n = n()) %>% 
  ggplot(aes(cut, n)) +
  geom_col() +
  xlab("Cut") + ylab("Count")
```

### Лучевая диаграмма (Sunburts)

```{r, echo=FALSE, message=FALSE}
diamonds %>% 
  group_by(cut, color) %>% 
  summarise(n = n()) %>% 
  ggplot(aes(cut, n, fill = color)) +
  geom_col(position = position_dodge()) +
  coord_polar() +
  xlab("Cut") + ylab("Count") +
  labs(fill = 'Color')
```

### Круговая диаграмма (Pie chart)

```{r, echo=FALSE, message=FALSE}
diamonds %>% 
  group_by(cut) %>% 
  summarise(n = n(),
            prop = (n / nrow(diamonds) * 100) %>% round(1) %>% paste0("%")) %>% 
  ggplot(aes("", n, fill = cut)) +
  geom_bar(stat = 'identity', width = 1) +
  geom_text(aes(label = prop), position = position_stack(vjust = 0.5)) +
  coord_polar('y', start = 0) + 
  xlab(NULL) + ylab(NULL) +
  labs(fill = 'Cut') +
  theme(axis.text.x = element_text(size = 0))
```


### Линейная диаграмма (Line graph, Line plot)

```{r, echo=FALSE, message=FALSE, warning=FALSE}
matrix(AirPassengers, ncol = 12) %>% as.tibble() %>% mutate(year = 1949:1960) -> for_line_graph
colnames(for_line_graph) <- c(month.abb, 'year')
for_line_graph %>% 
  pivot_longer(-year) %>% 
  mutate(name = factor(name, ordered = TRUE, levels = month.abb)) %>% 
  filter(year < 1952) %>% 
  ggplot(aes(name, value, group = year, color = factor(year))) +
  geom_line(linetype = 'solid') +
  labs(x = "Month", y = 'Number of passangers',
       color = "Year")
```


### Гистограмма (Histogram)

```{r, echo=FALSE, message=FALSE}
diamonds %>% ggplot(aes(price)) +
  geom_histogram(binwidth = 1000) +
  xlab('Price') + ylab('Count')
```

### График плотности распределения (Density plot)

```{r, echo=FALSE, message=FALSE}
diamonds %>% ggplot(aes(price, fill = cut)) +
  geom_density(alpha=0.5) +
  xlab('Price') + ylab('Density')
```

### Dot plot

```{r, echo=FALSE, message=FALSE}
set.seed(480)
diamonds %>% 
  slice(sample(1:nrow(diamonds), 20)) %>% 
  ggplot(aes(cut)) +
  geom_dotplot() +
  xlab('Price') + ylab('') +
  theme(axis.text.y = element_text(size = 0))
```

### Ящик с усами (Boxplot)

```{r, echo=FALSE, message=FALSE}
diamonds %>% slice(sample(1:nrow(diamonds), 300)) %>% 
  ggplot(aes(color, price)) +
  geom_boxplot() +
  xlab('Color') + ylab("Price")
```

### Violin plot

```{r, echo=FALSE, message=FALSE}
diamonds %>% slice(sample(1:nrow(diamonds), 300)) %>% 
  ggplot(aes(color, price)) +
  geom_violin() +
  stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
  xlab('Color') + ylab("Price")
```

### График интервальных оценок (Error bar)

```{r, echo=FALSE, message=FALSE}
diamonds %>% 
  ggplot(aes(cut, price)) +
  stat_summary(fun = mean, geom = 'point') +
  stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', width = 0.5) +
  xlab('Cut') + ylab("Price")
```

### Диаграмма рассеяния (Scatter plot)

```{r, echo=FALSE, message=FALSE}
diamonds %>% slice(sample(1:nrow(diamonds), 50)) %>% 
  ggplot(aes(x, y, color = color)) +
  geom_point() +
  labs(color = "Color")
```

### Пузырьковая диаграмма (Bubble plot)

```{r, echo=FALSE}
diamonds %>% slice(sample(1:nrow(diamonds), 100)) %>% 
  ggplot(aes(x, y, color = color, size = z)) +
  geom_point(alpha=0.5) +
  labs(color = "Color") +
  theme(legend.position = "bottom")
```


### Корреляционная матрица (Corrplot)

```{r, echo=FALSE, message=FALSE}
taia <- read_csv("https://github.com/angelgardt/taia/raw/master/data/taia.csv")
ggcorrplot::ggcorrplot(
  cor(taia %>% select(starts_with("pr"))),
  type = "lower",
  lab = TRUE,
  lab_size = 3,
  colors = c("indianred1", "white", "royalblue1"),
  show.legend = FALSE
)
```

## Good & Bad practices в визуализации

### Хорошо

* Подписать оси так, чтобы было понятно, что они обозначают
* Использовать контрастную палитру цветов (или обойтись черно-белой)
* [Проверить](https://www.color-blindness.com/coblis-color-blindness-simulator/), как видят график люди с цветовыми аномалиями зрения
* Выстроить из визуализаций [историю](https://drive.google.com/file/d/1cZNl66staWqmAWjUhUXON6KeAXtK8NyB/view)

### Плохо

* Использовать разные диапазоны шкал или разный масштаб на графиках, которые необходимо сравнивать
* Строить столбчатую диаграмму не от нуля
* Строить визуализацию в 3D на бумаге
* Строить круговую диаграму
* Строить круговую диаграмму в 3D

Больше примеров странных визуализаций [тут](https://viz.wtf/).

## Философия A Layered Grammar of Graphics

* График состоит из нескольких независимых друг от друга элементов
    * основы графика (фон и оси)
    * системы координат
    * способов отображения данных (геометрических объектов)
    * шкал
    * фасетов
* Однотипные элементы графика располагаются на отдельных слоях
* Вычисления отделены от визуализации
* Дизайн отделен от содержания

Эти принципы легли в основу пакета `ggplot2`.


## Итоги

- Форматы файлов данных бывают разные и их нужно по-разному загружать в R
- RStudio Projects --- это хорошо и помогает воспроизводимости
- Предобработка данных --- это определенный набор операций, которые в `tidyverse` достаточно интуитивно реализованы
- Строки и даты требуют к себе особого внимания
- Визуализаций много, они разнообразны и каждая по-своему хороша


